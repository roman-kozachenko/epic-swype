{"version":3,"sources":["clients/fetch.ts","clients/tp.ts","cards.actions/index.ts","cards.actions/actions.presets.ts","ActionSettings.tsx","Header.js","SwipeButtons.js","cards/AssignableCard.tsx","cards/UserCard.tsx","cards/DraggableCard.tsx","cards.provider/assignable.ts","cards.provider/index.ts","cards.provider/user.ts","TinderCards.js","YourFilters.tsx","CreateFilter.tsx","App.js","reportWebVitals.js","index.js"],"names":["CustomFieldType","CustomFieldHistoryState","tpHttpFetch","baseHttp","userAccessToken","fetch","input","initParam","a","init","request","url","isString","userToken","indexOf","requestUrl","response","Client","baseUrl","http","jsonParseReviver","undefined","this","window","command","url_","replace","options_","body","JSON","stringify","method","headers","Accept","then","_response","processExecuteCommand","status","_headers","forEach","v","k","text","_responseText","parse","result400","throwException","result401","result403","result500","Promise","resolve","id","resourceType","include","dateFormat","Error","encodeURIComponent","processGetEntity","processGetAssignable","processGetGeneralComments","processGetGeneralAttachments","processGetEntityState","where","select","take","skip","processGetEntitiesV2","payload","processGetEntitiesV2ByPost","processGetEntityV2","processGetEntityV2ByPost","processGetEntitiesHistoryV2","processGetEntitiesHistoryV2ByPost","processGetGeneral","processGetProjectsV2","processGetTeamsV2","filter","processGetAssignables","processGetAssignablesByPost","processGetAssignableById","processGetUserAuthenticationToken","processGetUser","user","processUpdateUser","processCreateUser","processGetLoggedUser","processGetMetaV2","processGetDomainSchemaV2","processGetCommentById","processGetAttachmentById","processGetRoleEntityTypeProcessSettings","processGetUsers","processGetAssignments","processGetDeletedUsers","processGetRoles","processGetRoleEfforts","entity","processUndelete","processGetCustomFields","processGetCustomFieldsV2","SwaggerException","message","result","isSwaggerException","obj","ROLE_DEV","ROLE_PO","ROLE_MNG","roles","getCurrentUserRole","localStorage","getItem","getActions","role","ActionSettings","actions","useState","currentPosAction","setCurrentPosAction","currentNegAction","setCurrentNegAction","useEffect","includes","setItem","Container","className","Grid","style","marginTop","marginBottom","container","justify","alignContent","item","xs","Select","fullWidth","value","onChange","e","target","map","MenuItem","Header","backButton","history","useHistory","location","useLocation","alignItems","justifyContent","IconButton","size","onClick","fontSize","to","src","alt","sx","textAlign","disabled","pathname","setNextRole","newIndex","length","SwipeButtons","console","log","AssignableCard","props","info","thisIsMyCopy","description","entityType","type","toUpperCase","name","dangerouslySetInnerHTML","__html","alignSelf","margin","display","flexGrow","assigneePic","marginLeft","fontWeight","asignee","effort","Home","marginRight","iterationName","LocationOn","leadTime","UserCard","avatar","age","Action","prop","direction","DraggableCard","isPressed","setIsPressed","start","useRef","setDirection","onTouchStart","current","touches","clientX","onMouseDown","onMouseUp","onTouchMove","diff","newDir","onMouseMove","onTouchEnd","validEffort","validIterations","validTypes","validAsignees","randomIntFromInterval","min","max","Math","floor","random","ProviderType","data","reverse","st","iteration","state","AssignableCards","client","UserInfos","getProvider","fetchTp","getClient","assignable","TinderCards","provider","useMemo","getCards","onSwipe","preventSwipe","baseFilters","title","items","YourFilters","filters","setFilters","additionalItems","newFilters","push","Typography","variant","align","Card","elevation","CardActionArea","CardHeader","subheader","action","event","stopPropagation","color","preventDefault","newArray","f","newLocalStorage","elem","Delete","Button","startIcon","AddBox","entityTypes","statuses","teams","iterations","CreateFilter","filterName","setFilterName","selectedType","setSelectedType","selectedStatus","setSelectedStatus","selectedTeam","setSelectedTeam","selectedIteration","setSelectedIteration","estimation","setEstimation","setAge","TextField","placeholder","Slider","newValue","step","marks","label","valueLabelDisplay","team","iter","currentFilters","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f97c201.chunk.js","sourcesContent":["import { isString } from \"util\"\n\nfunction addHeader(init: RequestInit, key: string, value: string) {\n  if (!init.headers) {\n    init.headers = {\n      [key]: value\n    }\n  } else if ((<any>init.headers).append) {\n    const headers: any = init.headers\n    headers.append(key, value)\n  } else {\n    (init as any).headers[key] = value\n  }\n}\n\nfunction enrichUrlWithUserTokenIfNeeded(url: string, userToken?: string): string {\n  if (userToken) {\n    url += url.indexOf('?') < 0 ? '?' : '&'\n    url += 'access_token='\n    url += userToken\n  }\n  return url\n}\n\nconst getRequestUrl = (request: RequestInfo) => {\n  return isString(request) ? request : (request as Request).url\n}\n\n\nexport const tpHttpFetch = (\n  baseHttp: {\n    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>\n  },\n  userAccessToken?: string\n) => ({\n  fetch: async (input: RequestInfo, initParam?: RequestInit) => {\n    const init = initParam ?? {}\n    const requestUrl = enrichUrlWithUserTokenIfNeeded(getRequestUrl(input), userAccessToken)\n\n\n    const response = await baseHttp.fetch(requestUrl, init)\n    return response\n  }\n})\n","/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nimport { RequestInfo, RequestInit, Response } from 'node-fetch'\n\nexport interface IClient {\n  /**\n   * Execute batch commands\n   * @param command (optional)\n   * @return Successful response\n   */\n  executeCommand(command: Command | null | undefined): Promise<CommandResult>\n  /**\n   * Returns entity by entity id and kind\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntity(\n    id: number,\n    resourceType: string,\n    include: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<EntityResult>\n  /**\n   * Get assignable\n   * @param id Entity id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAssignable(id: number, include: string | null | undefined): Promise<Assignable>\n  /**\n   * Retrieves comments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralComments(id: number, include: string | null | undefined): Promise<Anonymous>\n  /**\n   * Retrieves attachments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralAttachments(id: number, include: string | null | undefined): Promise<Anonymous2>\n  /**\n   * Get entity state\n   * @param id Entity id\n   * @return Successful response\n   */\n  getEntityState(id: number): Promise<EntityState>\n  /**\n   * get entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous3>\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous4>\n  /**\n   * get entity from TP including extended domain entities\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param select (optional) Causes some fields to be included in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntityV2(\n    id: number,\n    resourceType: string,\n    select: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous5>\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param id (optional) entityId\n   * @return Successful response\n   */\n  getEntityV2ByPost(\n    resourceType: string,\n    id: number | null | undefined,\n    payload: PostQueryParameters\n  ): Promise<Anonymous6>\n  /**\n   * get historical entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous7>\n  /**\n   * get historical data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous8>\n  /**\n   * Get general\n   * @param id Entity id\n   * @return Successful response\n   */\n  getGeneral(id: number): Promise<Anonymous9>\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getProjectsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous10>\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getTeamsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous11>\n  /**\n   * Retrieves list of assingables\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param filter (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getAssignables(\n    where: string | null | undefined,\n    filter: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous12>\n  /**\n   * Retrieves list of assingables by post\n   * @return Successful response\n   */\n  getAssignablesByPost(payload: PostQueryParameters): Promise<Anonymous13>\n  /**\n   * Retrieves assignable by id\n   * @param id entityId\n   * @param select (optional) Causes some fields to be included in the response\n   * @return Successful response\n   */\n  getAssignableById(id: number, select: string | null | undefined): Promise<Anonymous14>\n  /**\n   * Get user authentication token\n   * @return Successful response\n   */\n  getUserAuthenticationToken(): Promise<V1Authentication>\n  /**\n   * Retrieves user\n   * @param id user id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getUser(id: number, include: string | null | undefined): Promise<V1User>\n  /**\n   * Update user\n   * @return Successful response\n   */\n  updateUser(user: V1User): Promise<V1User>\n  /**\n   * Add a user to TP\n   * @return Successful response\n   */\n  createUser(user: V1User): Promise<V1User>\n  /**\n   * Get current user details\n   * @return Successful response\n   */\n  getLoggedUser(): Promise<V1User>\n  /**\n   * Get account meta v2\n   * @return Successful response\n   */\n  getMetaV2(): Promise<Anonymous15>\n  /**\n   * Get account domain schema v2\n   * @return Successful response\n   */\n  getDomainSchemaV2(): Promise<Anonymous16>\n  /**\n   * Retrieves comment by id\n   * @param id commentId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getCommentById(id: number, include: string | null | undefined): Promise<V1Comment>\n  /**\n   * Retrieves attachment by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAttachmentById(id: number, include: string | null | undefined): Promise<V1Attachment>\n  /**\n   * Retrieves role entity settings\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEntityTypeProcessSettings(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous17>\n  /**\n   * Retrieves users\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getUsers(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous18>\n  /**\n   * Retrieves assignments\n   * @param select (optional) Causes some fields to be included in the response\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @return Successful response\n   */\n  getAssignments(select: string | null | undefined, where: string | null | undefined): Promise<Anonymous19>\n  /**\n   * Retrieves a list of deleted users\n   * @return Successful response\n   */\n  getDeletedUsers(): Promise<V1DeletedUser[]>\n  /**\n   * Get list of roles\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoles(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous20>\n  /**\n   * Get list of role efforts\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEfforts(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous21>\n  /**\n   * Undelete specified entity\n   * @return Successful response\n   */\n  undelete(entity: V1UndeleteEntityRef): Promise<void>\n  /**\n   * Retrieves list of custom fields\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFields(\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous22>\n  /**\n   * Retrieves list of custom fields\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFieldsV2(\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous23>\n}\n\nexport class Client implements IClient {\n  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }\n  private baseUrl: string\n  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined\n\n  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n    this.http = http ? http : <any>window\n    this.baseUrl = baseUrl ? baseUrl : ''\n  }\n\n  /**\n   * Execute batch commands\n   * @param command (optional)\n   * @return Successful response\n   */\n  executeCommand(command: Command | null | undefined): Promise<CommandResult> {\n    let url_ = this.baseUrl + '/api/commands/v1/execute'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(command)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processExecuteCommand(_response)\n    })\n  }\n\n  protected processExecuteCommand(response: Response): Promise<CommandResult> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <CommandResult>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<CommandResult>(<any>null)\n  }\n\n  /**\n   * Returns entity by entity id and kind\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntity(\n    id: number,\n    resourceType: string,\n    include: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<EntityResult> {\n    let url_ = this.baseUrl + '/api/v1/{resourceType}/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntity(_response)\n    })\n  }\n\n  protected processGetEntity(response: Response): Promise<EntityResult> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <EntityResult>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<EntityResult>(<any>null)\n  }\n\n  /**\n   * Get assignable\n   * @param id Entity id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAssignable(id: number, include: string | null | undefined): Promise<Assignable> {\n    let url_ = this.baseUrl + '/api/v1/assignables/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignable(_response)\n    })\n  }\n\n  protected processGetAssignable(response: Response): Promise<Assignable> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Assignable>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Assignable>(<any>null)\n  }\n\n  /**\n   * Retrieves comments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralComments(id: number, include: string | null | undefined): Promise<Anonymous> {\n    let url_ = this.baseUrl + '/api/v1/general/{id}/comments?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneralComments(_response)\n    })\n  }\n\n  protected processGetGeneralComments(response: Response): Promise<Anonymous> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous>(<any>null)\n  }\n\n  /**\n   * Retrieves attachments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralAttachments(id: number, include: string | null | undefined): Promise<Anonymous2> {\n    let url_ = this.baseUrl + '/api/v1/general/{id}/attachments?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneralAttachments(_response)\n    })\n  }\n\n  protected processGetGeneralAttachments(response: Response): Promise<Anonymous2> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous2>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous2>(<any>null)\n  }\n\n  /**\n   * Get entity state\n   * @param id Entity id\n   * @return Successful response\n   */\n  getEntityState(id: number): Promise<EntityState> {\n    let url_ = this.baseUrl + '/api/v1/entitystates/{id}'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityState(_response)\n    })\n  }\n\n  protected processGetEntityState(response: Response): Promise<EntityState> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <EntityState>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<EntityState>(<any>null)\n  }\n\n  /**\n   * get entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous3> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesV2(_response)\n    })\n  }\n\n  protected processGetEntitiesV2(response: Response): Promise<Anonymous3> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous3>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous3>(<any>null)\n  }\n\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous4> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntitiesV2ByPost(response: Response): Promise<Anonymous4> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous4>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous4>(<any>null)\n  }\n\n  /**\n   * get entity from TP including extended domain entities\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param select (optional) Causes some fields to be included in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntityV2(\n    id: number,\n    resourceType: string,\n    select: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous5> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityV2(_response)\n    })\n  }\n\n  protected processGetEntityV2(response: Response): Promise<Anonymous5> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous5>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous5>(<any>null)\n  }\n\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param id (optional) entityId\n   * @return Successful response\n   */\n  getEntityV2ByPost(\n    resourceType: string,\n    id: number | null | undefined,\n    payload: PostQueryParameters\n  ): Promise<Anonymous6> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}/{id}'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (id !== null && id !== undefined) url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    else url_ = url_.replace('/{id}', '')\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntityV2ByPost(response: Response): Promise<Anonymous6> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous6>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous6>(<any>null)\n  }\n\n  /**\n   * get historical entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous7> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}History?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesHistoryV2(_response)\n    })\n  }\n\n  protected processGetEntitiesHistoryV2(response: Response): Promise<Anonymous7> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous7>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous7>(<any>null)\n  }\n\n  /**\n   * get historical data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous8> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}History?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesHistoryV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntitiesHistoryV2ByPost(response: Response): Promise<Anonymous8> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous8>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous8>(<any>null)\n  }\n\n  /**\n   * Get general\n   * @param id Entity id\n   * @return Successful response\n   */\n  getGeneral(id: number): Promise<Anonymous9> {\n    let url_ = this.baseUrl + '/api/v2/generals/{id}'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneral(_response)\n    })\n  }\n\n  protected processGetGeneral(response: Response): Promise<Anonymous9> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous9>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous9>(<any>null)\n  }\n\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getProjectsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous10> {\n    let url_ = this.baseUrl + '/api/v2/projects?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetProjectsV2(_response)\n    })\n  }\n\n  protected processGetProjectsV2(response: Response): Promise<Anonymous10> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous10>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous10>(<any>null)\n  }\n\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getTeamsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous11> {\n    let url_ = this.baseUrl + '/api/v2/teams?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetTeamsV2(_response)\n    })\n  }\n\n  protected processGetTeamsV2(response: Response): Promise<Anonymous11> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous11>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous11>(<any>null)\n  }\n\n  /**\n   * Retrieves list of assingables\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param filter (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getAssignables(\n    where: string | null | undefined,\n    filter: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous12> {\n    let url_ = this.baseUrl + '/api/v2/assignables?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (filter !== undefined) url_ += 'filter=' + encodeURIComponent('' + filter) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignables(_response)\n    })\n  }\n\n  protected processGetAssignables(response: Response): Promise<Anonymous12> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous12>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous12>(<any>null)\n  }\n\n  /**\n   * Retrieves list of assingables by post\n   * @return Successful response\n   */\n  getAssignablesByPost(payload: PostQueryParameters): Promise<Anonymous13> {\n    let url_ = this.baseUrl + '/api/v2/assignables'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignablesByPost(_response)\n    })\n  }\n\n  protected processGetAssignablesByPost(response: Response): Promise<Anonymous13> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous13>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous13>(<any>null)\n  }\n\n  /**\n   * Retrieves assignable by id\n   * @param id entityId\n   * @param select (optional) Causes some fields to be included in the response\n   * @return Successful response\n   */\n  getAssignableById(id: number, select: string | null | undefined): Promise<Anonymous14> {\n    let url_ = this.baseUrl + '/api/v2/assignables/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignableById(_response)\n    })\n  }\n\n  protected processGetAssignableById(response: Response): Promise<Anonymous14> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous14>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous14>(<any>null)\n  }\n\n  /**\n   * Get user authentication token\n   * @return Successful response\n   */\n  getUserAuthenticationToken(): Promise<V1Authentication> {\n    let url_ = this.baseUrl + '/api/v1/authentication'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUserAuthenticationToken(_response)\n    })\n  }\n\n  protected processGetUserAuthenticationToken(response: Response): Promise<V1Authentication> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Authentication>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Authentication>(<any>null)\n  }\n\n  /**\n   * Retrieves user\n   * @param id user id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getUser(id: number, include: string | null | undefined): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUser(_response)\n    })\n  }\n\n  protected processGetUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Update user\n   * @return Successful response\n   */\n  updateUser(user: V1User): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/{id}'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(user)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processUpdateUser(_response)\n    })\n  }\n\n  protected processUpdateUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Add a user to TP\n   * @return Successful response\n   */\n  createUser(user: V1User): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(user)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processCreateUser(_response)\n    })\n  }\n\n  protected processCreateUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 201) {\n      return response.text().then(_responseText => {\n        let result201: any = null\n        result201 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result201\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Get current user details\n   * @return Successful response\n   */\n  getLoggedUser(): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/loggedUser'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetLoggedUser(_response)\n    })\n  }\n\n  protected processGetLoggedUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Get account meta v2\n   * @return Successful response\n   */\n  getMetaV2(): Promise<Anonymous15> {\n    let url_ = this.baseUrl + '/api/meta/v2'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetMetaV2(_response)\n    })\n  }\n\n  protected processGetMetaV2(response: Response): Promise<Anonymous15> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous15>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous15>(<any>null)\n  }\n\n  /**\n   * Get account domain schema v2\n   * @return Successful response\n   */\n  getDomainSchemaV2(): Promise<Anonymous16> {\n    let url_ = this.baseUrl + '/api/DomainSchema/v2'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetDomainSchemaV2(_response)\n    })\n  }\n\n  protected processGetDomainSchemaV2(response: Response): Promise<Anonymous16> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous16>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous16>(<any>null)\n  }\n\n  /**\n   * Retrieves comment by id\n   * @param id commentId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getCommentById(id: number, include: string | null | undefined): Promise<V1Comment> {\n    let url_ = this.baseUrl + '/api/v1/comments/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCommentById(_response)\n    })\n  }\n\n  protected processGetCommentById(response: Response): Promise<V1Comment> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Comment>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Comment>(<any>null)\n  }\n\n  /**\n   * Retrieves attachment by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAttachmentById(id: number, include: string | null | undefined): Promise<V1Attachment> {\n    let url_ = this.baseUrl + '/api/v1/attachments/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAttachmentById(_response)\n    })\n  }\n\n  protected processGetAttachmentById(response: Response): Promise<V1Attachment> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Attachment>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Attachment>(<any>null)\n  }\n\n  /**\n   * Retrieves role entity settings\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEntityTypeProcessSettings(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous17> {\n    let url_ = this.baseUrl + '/api/v2/roleEntityTypeProcessSettings?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoleEntityTypeProcessSettings(_response)\n    })\n  }\n\n  protected processGetRoleEntityTypeProcessSettings(response: Response): Promise<Anonymous17> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous17>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous17>(<any>null)\n  }\n\n  /**\n   * Retrieves users\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getUsers(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous18> {\n    let url_ = this.baseUrl + '/api/v2/users?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUsers(_response)\n    })\n  }\n\n  protected processGetUsers(response: Response): Promise<Anonymous18> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous18>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous18>(<any>null)\n  }\n\n  /**\n   * Retrieves assignments\n   * @param select (optional) Causes some fields to be included in the response\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @return Successful response\n   */\n  getAssignments(select: string | null | undefined, where: string | null | undefined): Promise<Anonymous19> {\n    let url_ = this.baseUrl + '/api/v2/assignments?'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignments(_response)\n    })\n  }\n\n  protected processGetAssignments(response: Response): Promise<Anonymous19> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous19>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous19>(<any>null)\n  }\n\n  /**\n   * Retrieves a list of deleted users\n   * @return Successful response\n   */\n  getDeletedUsers(): Promise<V1DeletedUser[]> {\n    let url_ = this.baseUrl + '/api/deletedItems/v1/users'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetDeletedUsers(_response)\n    })\n  }\n\n  protected processGetDeletedUsers(response: Response): Promise<V1DeletedUser[]> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1DeletedUser[]>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1DeletedUser[]>(<any>null)\n  }\n\n  /**\n   * Get list of roles\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoles(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous20> {\n    let url_ = this.baseUrl + '/api/v2/roles?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoles(_response)\n    })\n  }\n\n  protected processGetRoles(response: Response): Promise<Anonymous20> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous20>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous20>(<any>null)\n  }\n\n  /**\n   * Get list of role efforts\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEfforts(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous21> {\n    let url_ = this.baseUrl + '/api/v2/roleEfforts?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoleEfforts(_response)\n    })\n  }\n\n  protected processGetRoleEfforts(response: Response): Promise<Anonymous21> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous21>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous21>(<any>null)\n  }\n\n  /**\n   * Undelete specified entity\n   * @return Successful response\n   */\n  undelete(entity: V1UndeleteEntityRef): Promise<void> {\n    let url_ = this.baseUrl + '/api/v1/undelete'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(entity)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processUndelete(_response)\n    })\n  }\n\n  protected processUndelete(response: Response): Promise<void> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        return\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<void>(<any>null)\n  }\n\n  /**\n   * Retrieves list of custom fields\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFields(\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous22> {\n    let url_ = this.baseUrl + '/api/v1/customfields?'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCustomFields(_response)\n    })\n  }\n\n  protected processGetCustomFields(response: Response): Promise<Anonymous22> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous22>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous22>(<any>null)\n  }\n\n  /**\n   * Retrieves list of custom fields\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFieldsV2(\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous23> {\n    let url_ = this.baseUrl + '/api/v2/customFields?'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCustomFieldsV2(_response)\n    })\n  }\n\n  protected processGetCustomFieldsV2(response: Response): Promise<Anonymous23> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous23>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous23>(<any>null)\n  }\n}\n\nexport interface ErrorDto {\n  /** Internal error code */\n  code: string\n  /** Error message */\n  message: string\n}\n\nexport interface ApiV1EntityRef {\n  Id: number\n}\n\nexport interface CustomFieldV1 {\n  Id: number\n  Name: string\n  Value: string\n  FieldType: CustomFieldType\n}\n\nexport interface CustomFieldV2 {\n  resourceType?: string | undefined\n  id: number\n  name: string\n  fieldType: CustomFieldType\n  historyState?: CustomFieldHistoryState | undefined\n}\n\n/** Custom field types */\nexport enum CustomFieldType {\n  CheckBox = 'CheckBox',\n  MultipleSelectionList = 'MultipleSelectionList',\n  Number = 'Number',\n  Date = 'Date',\n  Text = 'Text',\n  DropDown = 'DropDown',\n  RichText = 'RichText',\n  Entity = 'Entity'\n}\n\n/** Custom field history state */\nexport enum CustomFieldHistoryState {\n  NoHistory = 'NoHistory',\n  WriteEnabled = 'WriteEnabled',\n  ReadEnabled = 'ReadEnabled'\n}\n\nexport interface EntityResult extends ApiV1EntityRef {\n  ResourceType: string\n  Name: string\n  EntityState?: ApiV1EntityRef | undefined\n  Project?: ApiV1EntityRef | undefined\n}\n\nexport interface Command {\n  /** Command name */\n  name: string\n  /** Command correlation id */\n  correlationId?: string | undefined\n}\n\nexport interface BatchCommand extends Command {\n  commands: Command[]\n  batchFlush?: boolean | undefined\n  isTransactional?: boolean | undefined\n}\n\nexport interface ResourceCommand extends Command {\n  resource: Resource\n}\n\nexport interface Resource {\n  id: number\n  resourceType?: string | undefined\n}\n\nexport interface CommandResult {\n  correlationId: string\n  silent: boolean\n  succeed: boolean\n  exception?: CommandResultException | undefined\n}\n\nexport interface ResourceCommandResult extends CommandResult {\n  resource?: Resource | undefined\n}\n\nexport interface BatchCommandResult extends CommandResult {\n  results?: CommandResult[] | undefined\n}\n\nexport interface CommandResultException {\n  message?: string | undefined\n}\n\nexport interface GeneralV2 {\n  /** general id */\n  id: number\n  /** general name */\n  name: string\n  /** general resource type */\n  resourceType: string\n}\n\nexport interface BaseEntityV2 {\n  /** general id */\n  id: number\n  /** general name */\n  name: string\n}\n\nexport interface RoleEffort {\n  /** role effort id */\n  id: number\n  /** role effort value */\n  effort: number\n}\n\nexport interface PostQueryParameters {\n  where?: string | undefined\n  filter?: string | undefined\n  select?: string | undefined\n  take?: string | undefined\n  skip?: string | undefined\n  orderBy?: string | undefined\n  result?: string | undefined\n}\n\nexport interface Assignable {\n  /** Assignable id */\n  Id?: number | undefined\n  /** Assignable Name */\n  Name: string\n  /** Assignable description */\n  Description?: string | undefined\n  /** Assignable tags */\n  Tags?: string | undefined\n  /** Assignable creation date */\n  CreateDate?: Date | undefined\n  EntityType?: EntityType | undefined\n  EntityState: EntityState\n  Project?: V1Project | undefined\n}\n\nexport interface EntityState extends ApiV1EntityRef {\n  /** EntityState name */\n  Name: string\n  /** Defines if the state is final */\n  IsFinal?: boolean | undefined\n  /** Defines if the state is initial */\n  IsInitial?: boolean | undefined\n  /** Defines if the state is planned */\n  IsPlanned?: boolean | undefined\n  Workflow?: Workflow | undefined\n}\n\nexport interface EntityType {\n  /** EntityType id */\n  Id?: number | undefined\n  /** EntityType name */\n  Name?: string | undefined\n  EntityStates?: EntityStates | undefined\n}\n\nexport interface EntityStates {\n  Items: EntityState[]\n}\n\nexport interface Workflow {\n  /** Workflow id */\n  Id: number\n  /** Workflow name */\n  Name?: string | undefined\n  EntityStates?: EntityStates | undefined\n}\n\nexport interface V1Authentication {\n  Token: string\n}\n\nexport interface V1User {\n  /** User id */\n  Id?: number | undefined\n  /** First Name */\n  FirstName?: string | undefined\n  /** Last Name */\n  LastName?: string | undefined\n  Password?: string | undefined\n  /** Email */\n  Email?: string | undefined\n  /** Login */\n  Login?: string | undefined\n  /** User creation date */\n  CreateDate?: Date | undefined\n  /** User last modified date */\n  ModifyDate?: Date | undefined\n  /** User delete date */\n  DeleteDate?: Date | undefined\n  /** Determines whether user is active in the system */\n  IsActive?: boolean | undefined\n  /** Determines whether user is administrator */\n  IsAdministrator?: boolean | undefined\n  /** Determines whether user is an integration user */\n  IsIntegration?: boolean | undefined\n  /** Tp Auth Unique Identifier */\n  GlobalId?: string | undefined\n  /** User avatar */\n  AvatarUri?: string | undefined\n  /** Last login date */\n  LastLoginDate?: string | undefined\n  WeeklyAvailableHours?: number | undefined\n  /** Determines whether user is Observer */\n  IsObserver?: boolean | undefined\n  /** Determines whether user is Contributor */\n  IsContributor?: boolean | undefined\n  ProjectMembers?: ProjectMembers | undefined\n  Role?: { Id?: number | undefined, Name?: string | undefined } | undefined\n}\n\nexport interface V1ProjectMember {\n  Id?: number | undefined\n  Project?: V1Project | undefined\n  User?: V1User | undefined\n}\n\nexport interface V1Project {\n  Id?: number | undefined\n  Name?: string | undefined\n}\n\nexport interface V1DeletedUser {\n  id?: number | undefined\n  email?: string | undefined\n}\n\nexport interface V1UndeleteEntityRef {\n  id: number\n  entityType: string\n}\n\nexport interface ProjectV2 extends GeneralV2 {\n  isActive?: boolean | undefined\n}\n\nexport interface TeamV2 extends GeneralV2 {\n  isActive?: boolean | undefined\n}\n\nexport interface AssignableV2 extends GeneralV2 {\n  description?: string | undefined\n  startDate?: any | undefined\n  endDate?: any | undefined\n  plannedStartDate?: any | undefined\n  plannedEndDate?: any | undefined\n  progress?: number | undefined\n  teams?: EntityRefV2[] | undefined\n  release?: EntityRefV2 | undefined\n  userStory?: EntityRefV2 | undefined\n  teamIteration?: EntityRefV2 | undefined\n  feature?: EntityRefV2 | undefined\n  epic?: EntityRefV2 | undefined\n  project?: EntityRefV2 | undefined\n  comments?: Comments | undefined\n  entityState?: EntityStateV2 | undefined\n}\n\nexport interface CommentV2 {\n  id?: number | undefined\n  createDate?: Date | undefined\n  description?: string | undefined\n  owner?: UserV2 | undefined\n}\n\nexport interface UserV2 {\n  id?: number | undefined\n  login?: string | undefined\n  firstName?: string | undefined\n  lastName?: string | undefined\n  email?: string | undefined\n}\n\nexport interface AssignmentV2 {\n  id?: number | undefined\n  role?: BaseEntityV2 | undefined\n  generalUser?: UserV2 | undefined\n}\n\nexport interface RoleV2 {\n  id?: number | undefined\n  name?: string | undefined\n}\n\nexport interface EntityStateV2 {\n  /** EntityState id */\n  id?: number | undefined\n  /** EntityState name */\n  name?: string | undefined\n  /** Defines if the state is final */\n  isFinal?: boolean | undefined\n  /** Defines if the state is initial */\n  isInitial?: boolean | undefined\n  /** Defines if the state is planned */\n  isPlanned?: boolean | undefined\n}\n\nexport interface EntityRefV2 {\n  /** Entity id */\n  id: number\n  name?: string | undefined\n}\n\nexport interface V1Comment {\n  /** Comment ID */\n  Id?: number | undefined\n  Description?: string | undefined\n  ParentId?: number | undefined\n  CreateDate?: string | undefined\n  DescriptionModifyDate?: string | undefined\n  IsPrivate?: boolean | undefined\n  IsPinned?: boolean | undefined\n  General?: GeneralV2 | undefined\n  Owner?: UserV2 | undefined\n}\n\nexport interface V1Attachment {\n  /** Entity ID */\n  Id?: number | undefined\n  Name?: string | undefined\n  UniqueFileName?: string | undefined\n  Description?: string | undefined\n  Date?: string | undefined\n  Uri?: string | undefined\n  ThumbnailUri?: string | undefined\n  MimeType?: string | undefined\n  Size?: number | undefined\n}\n\nexport interface MetaEntityV2 {\n  name: string\n  description: string\n  baseType?: string | undefined\n  fields: MetaFieldV2[]\n}\n\nexport interface MetaFieldV2 {\n  name: string\n  description: string\n  type: string\n  isNullablePrimitive?: boolean | undefined\n  isDeprecated?: boolean | undefined\n  itemType?: MetaItemTypeV2 | undefined\n  refType?: string | undefined\n  isReadOnly?: boolean | undefined\n  isCustom?: boolean | undefined\n  processIds?: number[] | undefined\n}\n\nexport interface MetaItemTypeV2 {\n  type: string\n  refType: string\n}\n\nexport interface DomainSchemaEntityType {\n  entityTypeId: number\n  name: string\n  isGlobal: boolean\n  isEnabled: boolean\n  isAssignable: boolean\n  isTeamAssignable: boolean\n  hasAuditHistory: boolean\n  color?: string | undefined\n  origin?: string | undefined\n}\n\nexport interface DomainSchemaPrimitiveAttribute {\n  attributeId: number\n  name: string\n  entityTypeId: number\n  valueType: string\n  isEnabled: boolean\n}\n\nexport interface DomainSchemaReferenceAttribute {\n  attributeId: number\n  name: string\n  entityTypeId: number\n  referenceEntityTypeId: number\n  referenceCollectionName: string\n  isEnabled: boolean\n}\n\nexport interface DomainSchemaManyToManyReference {\n  manyToManyReferenceId: number\n  referenceEntityTypeId: number\n  toLeftEntityAttributeId: number\n  toRightEntityAttributeId: number\n  leftEntityOppositeCollectionFieldName: string\n  rightEntityOppositeCollectionFieldName: string\n  isEnabled: boolean\n}\n\nexport interface Anonymous {\n  Items: V1Comment[]\n}\n\nexport interface Anonymous2 {\n  Items: V1Attachment[]\n}\n\nexport interface Anonymous3 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous4 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous5 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous6 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous7 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous8 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous9 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous10 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: ProjectV2[] | undefined\n}\n\nexport interface Anonymous11 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: TeamV2[] | undefined\n}\n\nexport interface Anonymous12 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous13 {\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous14 {\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous15 {\n  entities: MetaEntityV2[]\n}\n\nexport interface Anonymous16 {\n  entityTypes: DomainSchemaEntityType[]\n  primitiveAttributes: DomainSchemaPrimitiveAttribute[]\n  referenceAttributes: DomainSchemaReferenceAttribute[]\n  manyToManyReferences: DomainSchemaManyToManyReference[]\n}\n\nexport interface Anonymous17 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous18 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: UserV2[] | undefined\n}\n\nexport interface Anonymous19 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: AssignmentV2[] | undefined\n}\n\nexport interface Anonymous20 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous21 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: RoleEffort[] | undefined\n}\n\nexport interface Anonymous22 {\n  Items?: CustomFieldV1[] | undefined\n}\n\nexport interface Anonymous23 {\n  items?: CustomFieldV2[] | undefined\n}\n\nexport interface ProjectMembers {\n  Items?: V1ProjectMember[] | undefined\n}\n\nexport interface Comments {\n  items?: CommentV2[] | undefined\n}\n\nexport class SwaggerException extends Error {\n  message: string\n  status: number\n  response: string\n  headers: { [key: string]: any }\n  result: any\n\n  constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {\n    super()\n\n    this.message = message\n    this.status = status\n    this.response = response\n    this.headers = headers\n    this.result = result\n  }\n\n  protected isSwaggerException = true\n\n  static isSwaggerException(obj: any): obj is SwaggerException {\n    return obj.isSwaggerException === true\n  }\n}\n\nfunction throwException(\n  message: string,\n  status: number,\n  response: string,\n  headers: { [key: string]: any },\n  result?: any\n): any {\n  if (result !== null && result !== undefined) throw result\n  else throw new SwaggerException(message, status, response, headers, null)\n}\n","// use extension to fix CORS https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9\nimport {tpHttpFetch} from \"../clients/fetch\";\nimport fetch from \"unfetch\";\nimport {Client} from \"../clients/tp\";\n\nexport const getClient = () => {\n    const fetchTp = tpHttpFetch({fetch: fetch as any}, 'MTo3VERNNlFXQU5IZm1EU3g4UmZYSU96OUpuM3hZOGt0NnpqVjA3QmpkREQ4PQ==')\n    return new Client('http://tplocal.com', fetchTp as any)\n}\n\nexport const ROLE_DEV = 'Developer'\nexport const ROLE_QA = 'QA'\nexport const ROLE_PO = 'Product Owner'\nexport const ROLE_MNG = 'Manager'\nexport const roles = [ROLE_DEV, ROLE_QA, ROLE_PO, ROLE_MNG]\n\nexport const getCurrentUserRole = () => {\n    return localStorage.getItem('role') ?? roles[0]\n}","import { CardsProvider, ProviderType, getProvider } from \"../cards.provider\";\nimport { ROLE_DEV, ROLE_MNG, ROLE_PO, ROLE_QA } from \"./index\";\n\nexport const getActions = (role: string): string[] => {\n    switch (role) {\n        case ROLE_DEV: return [\n            'Ignore',\n            'Assign to me',\n            'Follow',\n        ]\n        case ROLE_QA: return [\n            'Reopen',\n            'Tested',\n            'Ignore',\n        ]\n        case ROLE_MNG: return [\n            'Fire',\n            'Promote',\n            'Ignore',\n            'Schedule 1:1'\n        ]\n        case ROLE_PO: return [\n            'Unassign from any PI',\n            'Move to next PI',\n            'Ignore',\n            'Assign to current iteration'\n        ]\n    }\n    return []\n}\n","import React, {useEffect, useState} from 'react';\nimport {Container, Grid, MenuItem, Select} from \"@material-ui/core\";\nimport {getCurrentUserRole} from \"./cards.actions\";\nimport {getActions} from \"./cards.actions/actions.presets\";\n\nfunction ActionSettings() {\n    const role = getCurrentUserRole()\n    const actions = getActions(role)\n    const [currentPosAction, setCurrentPosAction] = useState(localStorage.getItem('positiveAction'))\n    const [currentNegAction, setCurrentNegAction] = useState(localStorage.getItem('negativeAction'))\n\n    useEffect(() => {\n        if (currentPosAction && !actions.includes(currentPosAction)) {\n            localStorage.setItem('positiveAction', actions[0])\n            setCurrentPosAction(actions[0])\n        }\n        if (currentNegAction && !actions.includes(currentNegAction)) {\n            localStorage.setItem('negativeAction', actions[0])\n            setCurrentPosAction(actions[0])\n        }\n    }, [])\n\n    return (\n        <Container className=\"chats\">\n            <Grid style={{\n                marginTop: '8px',\n                marginBottom: '8px',\n            }} container justify={'center'} alignContent={'center'}>\n                <Grid item xs={6}>\n                    Swipe right action:\n                </Grid>\n                <Grid item xs={6}>\n                    <Select\n                        fullWidth\n                        value={currentPosAction ?? actions[0]}\n                        onChange={(e) => {\n                            localStorage.setItem('positiveAction', e.target.value as string)\n                            setCurrentPosAction(e.target.value as string)\n                        }}>\n                        {actions.map(a => <MenuItem value={a}>{a}</MenuItem>)}\n                    </Select>\n                </Grid>\n            </Grid>\n            <Grid container style={{\n                marginTop: '8px',\n                marginBottom: '8px',\n            }} >\n                <Grid item xs={6}>\n                    Swipe left action:\n                </Grid>\n                <Grid item xs={6}>\n                    <Select\n                        fullWidth\n                        value={currentNegAction ?? actions[0]}\n                        onChange={(e) => {\n                            localStorage.setItem('negativeAction', e.target.value as string)\n                            setCurrentNegAction(e.target.value as string)\n                        }}>\n                        {actions.map(a => <MenuItem value={a}>{a}</MenuItem>)}\n                    </Select>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default ActionSettings\n","import React from 'react';\nimport './Header.css';\nimport PersonIcon from '@material-ui/icons/Person';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport IconButton from '@material-ui/core/IconButton';\nimport {Link, useHistory, useLocation} from 'react-router-dom';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport {Grid} from \"@material-ui/core\";\n\nfunction Header({ backButton }) {\n    // is used to remember the browser history\n    const history = useHistory();\n    const location = useLocation()\n\n    return (\n        <div className = \"header\">\n            <Grid container\n                  alignItems=\"center\"\n                  justifyContent=\"end\">\n                <Grid item xs={3}>\n                    {backButton ? (\n                        <IconButton size={'small'} onClick = {() => history.replace(backButton)}>\n                            <ArrowBackIosIcon fontSize = \"large\" className = \"header__icon\" />\n                        </IconButton>\n                    ) : (\n                        <div className = \"header__icon\" />\n                    )}\n                </Grid>\n                <Grid item xs={6}>\n                    <Link to = \"/\">\n                        <img\n                            className = \"header__logo\"\n                            src = \"https://mma.prnewswire.com/media/82080/apptio_logo.jpg?w=200\"\n                            alt = \"TinderProcess logo\"\n                        />\n                    </Link>\n                </Grid>\n                <Grid item xs={3} sx={{\n                    textAlign: 'end'\n                }}>\n                    <Link to = \"/action-settings\">\n                        <IconButton disabled={location.pathname === '/action-settings'} size={'small'}>\n                            <TuneIcon className = \"header__icon\" fontSize = \"large\" />\n                        </IconButton>\n                    </Link>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './SwipeButtons.css';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport {IconButton} from '@material-ui/core';\nimport {getCurrentUserRole, roles} from \"./cards.actions\";\n\nfunction setNextRole() {\n    const role = getCurrentUserRole()\n    const index = roles.indexOf(role)\n    const newIndex = (index + 1) % roles.length\n    localStorage.setItem('role', roles[newIndex])\n}\n\nfunction SwipeButtons() {\n    return (\n        <div className=\"swipeButtons\">\n            <IconButton onClick={() => console.log('x')} className=\"swipeButtons__repeat\">\n                <ReplayIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton onClick={() => console.log('xdd')} className=\"swipeButtons__left\">\n                <CloseIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton onClick={setNextRole} className=\"swipeButtons__star\">\n                <StarRateIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__right\">\n                <FavoriteIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__lightning\">\n                <FlashOnIcon fontSize=\"large\"/>\n            </IconButton>\n        </div>\n    )\n}\n\nexport default SwipeButtons\n","import { Home, LocationOn } from \"@material-ui/icons\";\nimport { AssignableInfo } from \"../cards.provider/assignable\";\nimport { SingleTermLabel } from \"@targetprocess/entity-label\";\n\ntype AssignableCardProps = {\n  info: AssignableInfo;\n};\n\nexport const AssignableCard = (props: AssignableCardProps) => {\n  const info = props.info;\n  const thisIsMyCopy = info.description;\n  return (\n    <div>\n      <div className=\"card-header\">\n        <div className=\"e-label\">\n          <SingleTermLabel entityType={info.type} text={info.type.toUpperCase()} />\n        </div>\n        <h3>{info.name}</h3>\n      </div>\n      <div className=\"\"></div>\n      <div className=\"cut-text\" dangerouslySetInnerHTML={{ __html: thisIsMyCopy }}></div>\n      <div style={{ alignSelf: \"flex-end\", marginTop: \"48px\" }}>\n        <div style={{ margin: 4, display: \"flex\", flexGrow: 1, alignItems: \"center\" }}>\n          <div className=\"assignee-container\">\n            <img src={info.assigneePic} />\n          </div>\n          <span style={{ marginLeft: 8, fontWeight: \"bold\", flexGrow: 1 }}>{info.asignee}</span>\n          <div style={{ fontSize: \"small\" }}>Effort: {info.effort}</div>\n        </div>\n        <div style={{ marginTop: 4, marginBottom: 4, display: \"flex\", flexGrow: 1, alignItems: \"center\" }}>\n          <Home style={{ marginRight: 4 }} /> {info.iterationName}\n        </div>\n        <div style={{ marginTop: 4, marginBottom: 4, display: \"flex\", flexGrow: 1, alignItems: \"center\" }}>\n          <LocationOn style={{ marginRight: 4 }} /> Lead time: {info.leadTime}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Home } from \"@material-ui/icons\";\nimport { UserInfo } from \"../cards.provider/user\";\nimport \"./Cards.css\";\n\ntype UserCardProps = {\n  info: UserInfo;\n};\nexport const UserCard = (props: UserCardProps) => {\n  const info = props.info;\n  return (\n    <div className=\"user-card\">\n      <div className=\"card-header\">\n        <h3>{info.name}</h3>\n      </div>\n      <div className=\"avatar\">\n        <img src={info.avatar} />\n      </div>\n      <div className=\"home\">\n        <Home /> <div className=\"home__text\">{info.location}</div>\n      </div>\n      <div>\n        <strong>Age:</strong> {info.age}\n      </div>\n    </div>\n  );\n};\n","import { useState, useRef } from \"react\";\nimport { getActions } from \"../cards.actions/actions.presets\";\nimport { getCurrentUserRole } from \"../cards.actions\";\nimport { CardInfo } from \"../cards.provider\";\nimport { AssignableCard } from \"./AssignableCard\";\nimport { AssignableInfo } from \"../cards.provider/assignable\";\nimport { UserCard } from \"./UserCard\";\nimport { UserInfo } from \"../cards.provider/user\";\n\ninterface CardProps {\n  info: CardInfo;\n}\n\ninterface ActionProp {\n  direction: \"left\" | \"right\";\n}\n\nconst Action = (prop: ActionProp) => {\n  const actions = getActions(getCurrentUserRole());\n  const text = prop.direction === \"left\" ? actions[1] : actions[0];\n  return <div className={`action ${prop.direction}`}>{text}</div>;\n};\n\n// id\n// name\n// role\n// location\n// age\n// avatar\nexport const DraggableCard = (props: CardProps) => {\n  const { info } = props;\n  const [isPressed, setIsPressed] = useState(false);\n  const start = useRef(0);\n  const [direction, setDirection] = useState<string | null>(null);\n\n  return (\n    <div\n      className=\"card\"\n      onTouchStart={(e) => {\n        start.current = e.touches[0].clientX;\n        setIsPressed(true);\n      }}\n      onMouseDown={(e) => {\n        start.current = e.clientX;\n        setIsPressed(true);\n      }}\n      onMouseUp={() => {\n        setIsPressed(false);\n      }}\n      onTouchMove={(e) => {\n        const diff = e.touches[0].clientX - start.current;\n        if (diff === 0) {\n          return;\n        }\n        const newDir = diff > 0 ? \"left\" : \"right\";\n        if (direction !== newDir) {\n          setDirection(newDir);\n        }\n      }}\n      onMouseMove={(e) => {\n        const diff = e.clientX - start.current;\n        if (diff === 0) {\n          return;\n        }\n        const newDir = diff > 0 ? \"left\" : \"right\";\n        if (direction !== newDir) {\n          setDirection(newDir);\n        }\n      }}\n      onTouchEnd={() => {\n        setIsPressed(false);\n      }}\n    >\n      {getCurrentUserRole() === \"Manager\" && <UserCard info={info as UserInfo} />}\n      {isPressed && direction && <Action direction={direction as any} />}\n      {getCurrentUserRole() !== \"Manager\" && <AssignableCard info={info as AssignableInfo} />}\n    </div>\n  );\n};\n","import { CardInfo, CardsProvider } from \".\";\nimport { Client } from \"../clients/tp\";\n\nexport interface AssignableInfo extends CardInfo {\n  name: string;\n  description: string;\n  state: string;\n  type: \"UserStory\" | \"Bug\" | \"Feature\";\n  asignee: string;\n  assigneePic: string;\n  iterationName: string;\n  leadTime: string;\n  effort: number;\n}\n\nexport const validEffort = [1, 2, 3, 5, 8, 13, 21];\nexport const validIterations = [\"Iteration 1\", \"Iteration 2\", \"Iteration 3\"];\nexport const validTypes = [\"UserStory\", \"Bug\", \"Feature\"];\nexport const validAsignees = [\n  {\n    asignee: \"Roman Kozachenko\",\n    assigneePic: \"https://ca.slack-edge.com/ETDMA4DGC-U01NF4WNQF5-940190b3e3de-512\",\n  },\n  { assigneePic: \"https://ca.slack-edge.com/ETDMA4DGC-U032NEX7Q92-174c5e71448a-512\", asignee: \"Grzegorz Hawliczek\" },\n  { asignee: \"Aliaksandr Evsuchenya\", assigneePic: \"https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512\" },\n];\n\nexport function randomIntFromInterval(min: number, max: number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst stories = [\n  {\n    id: 189988,\n    name: \"Improve Resilience: Implement state transfer resilience\",\n    description:\n      \"Bulk transfer state should work in case of failure for one of the work items in bulk\\n\\nIf some state handler is failed, state transfer should not fail for work item. (other handler should transfer state). Errors should be written to CL. See implementation of transfer state in jira adapter. \\nConsider code reuse \",\n  },\n  {\n    id: 189975,\n    name: \"Improve Resilience: wrap azure call erors with RestCall/Rertriable errors\",\n    description:\n      \"1. ensure [429, 500+] errors are converted to Retriable Error (Rest Error)\\n2. ensure retry logic is using in ado adapter. Add if not. For webhooks and commands\\n3. adapter should return proper status codes so Entity Sync will be able to retry generic events processing\\n4. Add retries for HTTP client (429, 500+ errors should be retried)\",\n  },\n  {\n    id: 189974,\n    name: \"Allow add cross cluster ref for target account\",\n    description:\n      \"Problem:\\nwe need to receive update events from target TP account to tp adapter\\n\\nAuto create target ref.\\nDefine an api for creating target ref, working with user token auth. Should check user is admin.\\nOn profile save, if profile TP<->TP, es checks if profile cross cluster, create and XXX instance.\\nIf xxx instance send via http.\\n\",\n  },\n  {\n    id: 189972,\n    name: \"Extend share api to support explicit multi sharing\",\n    description:\n      \"Extend api to allow explicit multi share.\\nBy default behavior should be current - multi share disabled.\\nKeep entity lock for multi share as well, but disallow share more then once to one profile.\",\n  },\n  {\n    id: 189968,\n    name: \"Extend entity sync details to support multi sharing\",\n    description:\n      \"Enabled by feature toggle.\\nWhen feature toggle enabled:\\nIf entity shared, still show list of profiles entity NOT shared yet but applicable and TP type for now.\\n\\nWill need to extend get possible shares tp filter profiles we already shared an entity.\",\n  },\n  {\n    id: 189957,\n    name: \"Default mapping for multiple select objects\",\n    description:\n      \"Such mappings must work by default (without adding custom JS mapping)\\n\\nMultiple select drop-down to multiple selection. If all values are listed by default, no need to create new. \\n\\nJira Components (multiple value reference) mapped to TP CF of multiple select list must match by name (now done with JS mappings)\\n\\n\\nReleases to Version\\n\",\n  },\n  {\n    id: 189952,\n    name: \"Support multiple link types in child collection mappings\",\n    description:\n      \"2 options:\\n- generate a collection mapping for every of multy relations selcted. On backend group collection mappings by source relation and apply only one by some convension.\\n- change collection mapping definition. Make source and target arrays. Migrate database. Change mapping apply to match by array instead of single relation.\",\n  },\n  {\n    id: 189951,\n    name: \"Add 'How it works' link for profile split guide\",\n    description:\n      \"Mockup:  https://www.figma.com/file/Z6D9I6LKGnlULAZVSE8jdO/Jira-Integration?node-id=11244%3A44238&t=brtjvmvMtTICUHoM-1\\n\\nAdd info icon with 2 options:\\n\\n- 'How it works' link with redirect to new browser page with an article TBD link after copyright review completed\\n- 'Provide Feedback' which will duplicate the pop-up from the Sync Tab view \\n\",\n  },\n  {\n    id: 189947,\n    name: \"Jira: process by default (with no JS) sync of users if they do not have public emails\",\n    description:\n      \"<div>As a <i>type of user</i>&#44; I want <i>some goal</i> so that <i>some reason</i></div>\\r\\n\\n<div> </div>\\r\\n\\n<div> </div>\\r\\n\\n<div><i>image</i></div>\\r\\n\\n<div><i>hgjnhgnnjgnhjhg</i></div>\\r\\n\\n<div><i></i></div>\\r\\n\",\n  },\n];\n\nconst data: AssignableInfo[] = stories.reverse().map((st) => ({\n  ...st,\n  type: validTypes[randomIntFromInterval(0, validTypes.length - 1)] as any,\n  ...validAsignees[randomIntFromInterval(0, validAsignees.length - 1)],\n  effort: validEffort[randomIntFromInterval(0, validEffort.length - 1)],\n  iteration: validIterations[randomIntFromInterval(0, validIterations.length - 1)],\n  leadTime: `${randomIntFromInterval(1, 10)} days`,\n  state: \"New\",\n  iterationName: \"Iteration 1\",\n}));\n\nexport class AssignableCards implements CardsProvider {\n  constructor(private client: Client) {}\n\n  public getCards(): CardInfo[] {\n    return data;\n  }\n}\n","import { tpHttpFetch } from \"../clients/fetch\";\nimport { Client } from \"../clients/tp\";\nimport fetch from \"unfetch\";\nimport { AssignableCards } from \"./assignable\";\nimport { UserInfos } from \"./user\";\n\nexport enum ProviderType {\n  \"user\",\n  \"assignable\",\n}\n\nexport interface CardInfo {\n  name: string\n}\n\nexport interface CardsProvider {\n  getCards: () => CardInfo[];\n}\n\n// use extension to fix CORS https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9\nexport const getClient = () => {\n  const fetchTp = tpHttpFetch(\n    { fetch: fetch as any },\n    \"MTpzQkdRQXV0bmZ4c0k0SXN0WXp2QW9wR0ZkR1hUb1VNbS9TUGw3VldRWkF3PQ==\"\n  );\n  return new Client(\"https://inteam.tpondemand.net\", fetchTp as any);\n};\n\nexport const getProvider = (type: ProviderType): CardsProvider => {\n  const client = getClient();\n  const providers = {\n    [ProviderType.assignable]: new AssignableCards(client),\n    [ProviderType.user]: new UserInfos(client),\n  };\n\n  return providers[type] ?? new AssignableCards(client);\n};\n","import { CardInfo, CardsProvider } from \".\";\nimport { Client } from \"../clients/tp\";\n\nconst data: UserInfo[] = [\n  {\n    id: 2,\n    name: \"Rosalie Ramsey\",\n    role: \"Head\",\n    location: \"Cyprus\",\n    age: 32,\n    avatar: \"/epic-swype/avatars/avatar2.jpg\",\n  },\n  {\n    id: 3,\n    name: \"Michael Crow\",\n    role: \"Head\",\n    location: \"Belarus\",\n    age: 34,\n    avatar: \"/epic-swype/avatars/avatar3.png\",\n  },\n  {\n    id: 4,\n    name: \"Aliaksander Evsuchenya\",\n    role: \"Developer\",\n    location: \"Belarus\",\n    age: 31,\n    avatar: \"/epic-swype/avatars/avatar4.jpg\",\n  },\n  {\n    id: 5,\n    name: \"Eugene Wilson\",\n    role: \"Head\",\n    location: \"Belarus\",\n    age: 28,\n    avatar: \"/epic-swype/avatars/avatar5.jpg\",\n  },\n  {\n    id: 10,\n    name: \"Randall Townsend\",\n    role: \"Head\",\n    location: \"USA\",\n    age: 45,\n    avatar: \"/epic-swype/avatars/avatar10.jpg\",\n  },\n];\n\nexport interface UserInfo extends CardInfo {\n  id: number;\n  name: string;\n  avatar: string;\n  role: string;\n  location: string;\n  age: number;\n}\n\nexport class UserInfos implements CardsProvider {\n  constructor(private client: Client) {}\n\n  public getCards(): CardInfo[] {\n    return data;\n  }\n}\n","import { useMemo } from \"react\";\nimport \"./TinderCard.css\";\nimport TinderCard from \"react-tinder-card\";\nimport { DraggableCard } from \"./cards/DraggableCard\";\nimport { getCurrentUserRole, ROLE_MNG } from \"./cards.actions\";\nimport { getProvider, ProviderType } from \"./cards.provider\";\n\nexport let counterTinder = 0;\n\nconst getProviderByRole = () => {\n  return getProvider(getCurrentUserRole() === ROLE_MNG ? ProviderType.user : ProviderType.assignable);\n};\n\nfunction TinderCards() {\n  const role = getCurrentUserRole();\n  const provider = getProviderByRole();\n\n  const data = useMemo(() => provider.getCards(), [role]);\n  // piece of code which run based on condition\n\n  console.log(data);\n  return (\n    <div>\n      <div className=\"tinderCards__cardContainer\">\n        {data.map((info) => (\n          <TinderCard\n            onSwipe={() => {\n              ++counterTinder;\n            }}\n            className=\"swipe\"\n            key={info.name}\n            preventSwipe={[\"up\", \"down\"]}\n          >\n            <DraggableCard info={info} />\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default TinderCards;\n","import {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardHeader,\n  Container,\n  IconButton,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { Add, AddBox, AddOutlined, Delete } from \"@material-ui/icons\";\nimport { randomIntFromInterval } from \"./cards.provider/assignable\";\nimport { useEffect, useState } from \"react\";\n\nconst baseFilters = [\n  {\n    id: 1,\n    title: \"Next PI\",\n    items: 169,\n  },\n  {\n    id: 2,\n    title: \"Current PI\",\n    items: 420,\n  },\n  {\n    id: 3,\n    title: \"Current iteration\",\n    items: 2137,\n  },\n];\n\nexport const YourFilters = () => {\n  const [filters, setFilters] = useState(baseFilters);\n  const history = useHistory();\n\n  useEffect(() => {\n    const additionalItems = JSON.parse(localStorage.getItem(\"customFilterNames\") ?? \"[]\") as string[];\n    const newFilters = [...filters];\n    for (const item of additionalItems) {\n      newFilters.push({\n        id: randomIntFromInterval(100, 500),\n        items: randomIntFromInterval(1, 500),\n        title: item,\n      });\n    }\n    setFilters(newFilters);\n  }, []);\n\n  return (\n    <Container>\n      <Typography variant={\"h5\"} align={\"center\"} style={{ marginBottom: \"16px\" }}>\n        Your filters\n      </Typography>\n      {filters.map((filter) => (\n        <Card elevation={8} style={{ marginBottom: 8 }} key={filter.title}>\n          <CardActionArea onClick={() => history.push(`/filter/${filter.id}`)}>\n            <CardHeader\n              title={filter.title}\n              subheader={`${filter.items} items`}\n              action={\n                <IconButton\n                  onMouseDown={(event) => event.stopPropagation()}\n                  style={{ color: \"red\" }}\n                  onClick={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    const newArray = filters.filter((f) => f !== filter);\n                    const newLocalStorage = (\n                      JSON.parse(localStorage.getItem(\"customFilterNames\") ?? \"[]\") as string[]\n                    ).filter((elem) => elem !== filter.title);\n                    localStorage.setItem(\"customFilterNames\", JSON.stringify(newLocalStorage));\n                    setFilters(newArray);\n                  }}\n                >\n                  <Delete />\n                </IconButton>\n              }\n            />\n          </CardActionArea>\n        </Card>\n      ))}\n      <Button startIcon={<AddBox />} onClick={() => history.push(\"/create-filter\")}>\n        Add new filter\n      </Button>\n    </Container>\n  );\n};\n","import {Button, Container, InputLabel, MenuItem, Select, Slider, TextField, Typography} from \"@material-ui/core\";\nimport {useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nconst entityTypes = ['UserStory', 'Bug', 'Feature', 'Epic', 'PortfolioEpic']\nconst statuses = ['New', 'Planned', 'In Dev', 'Coded', 'Ready for testing', 'Testing', 'Tested', 'Merged', 'Validation', 'Done']\nconst teams = ['Inteam', 'Lambda', 'Svekla']\nconst iterations = ['PI12 Iteration 1', 'PI12 Iteration 2', 'PI12 Iteration 3', 'PI13 Iteration 1', 'PI13 Iteration 2', 'PI13 Iteration 3']\n\nexport const CreateFilter = () => {\n    const history = useHistory()\n    const [filterName, setFilterName] = useState('')\n    const [selectedType, setSelectedType] = useState([entityTypes[0]])\n    const [selectedStatus, setSelectedStatus] = useState([statuses[0]])\n    const [selectedTeam, setSelectedTeam] = useState([teams[0]])\n    const [selectedIteration, setSelectedIteration] = useState([iterations[0]])\n    const [estimation, setEstimation] = useState<number[]>([3, 8]);\n    const [age, setAge] = useState<number[]>([21, 37]);\n\n    const handleEstimationChange = (event: any, newValue: number | number[]) => {\n        setEstimation(newValue as number[]);\n    };\n\n    const handleAgeChange = (event: any, newValue: number | number[]) => {\n        setAge(newValue as number[]);\n    };\n\n    // @ts-ignore\n    return (\n        <Container>\n            <Typography variant={'h5'} align={'center'} style={{marginBottom: '16px'}}>\n                Discovery settings\n            </Typography>\n            <TextField value={filterName} onChange={e => setFilterName(e.target.value as string)} style={{marginBottom: 8}} placeholder={'Filter name'} variant={'outlined'} size={'small'} fullWidth />\n            <Typography variant={'h6'} align={'left'} style={{marginBottom: '4px'}}>\n                Card size\n            </Typography>\n            <Slider value={estimation}\n                    onChange={handleEstimationChange}\n                    step={null}\n                    style={{marginBottom: 32}}\n                    marks={[\n                        {value: 1, label: '1'},\n                        {value: 2, label: '2'},\n                        {value: 3, label: '3'},\n                        {value: 5, label: '5'},\n                        {value: 8, label: '8'},\n                        {value: 13, label: '13'},\n                        {value: 21, label: '21'},\n                    ]}\n                    min={1}\n                    max={21}\n                    valueLabelDisplay=\"auto\"/>\n            Entity type:\n            <Select style={{marginBottom: 8}} value={selectedType} onChange={e => setSelectedType(e.target.value as string[])} fullWidth variant='outlined'>\n                {entityTypes.map(type => <MenuItem value={type} key={type}>{type}</MenuItem>)}\n            </Select>\n            Status:\n            <Select style={{marginBottom: 8}} value={selectedStatus} onChange={e => setSelectedStatus(e.target.value as string[])} fullWidth variant='outlined'>\n                {statuses.map(status => <MenuItem value={status} key={status}>{status}</MenuItem>)}\n            </Select>\n            Team:\n            <Select style={{marginBottom: 8}} value={selectedTeam} onChange={e => setSelectedTeam(e.target.value as string[])} fullWidth variant='outlined'>\n                {teams.map(team => <MenuItem value={team} key={team}>{team}</MenuItem>)}\n            </Select>\n            Iteration:\n            <Select style={{marginBottom: 8}} value={selectedIteration} onChange={e => setSelectedIteration(e.target.value as string[])} fullWidth variant='outlined'>\n                {iterations.map(iter => <MenuItem value={iter} key={iter}>{iter}</MenuItem>)}\n            </Select>\n            <Typography variant={'h6'} align={'left'} style={{marginBottom: '4px'}}>\n                Card age\n            </Typography>\n            <Slider value={age}\n                    onChange={handleAgeChange}\n                    min={0}\n                    max={100}\n                    valueLabelDisplay=\"auto\"/>\n            <Button variant={'contained'} fullWidth onClick={() => {\n                history.replace('/')\n                const currentFilters = JSON.parse(localStorage.getItem('customFilterNames') ?? '[]') as string[]\n                currentFilters.push(filterName)\n                localStorage.setItem('customFilterNames', JSON.stringify(currentFilters))\n            }}>\n                Save\n            </Button>\n        </Container>\n    )\n}","import { Route, HashRouter, Switch, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport ActionSettings from \"./ActionSettings\";\nimport Header from \"./Header\";\nimport SwipeButtons from \"./SwipeButtons\";\nimport TinderCards from \"./TinderCards\";\nimport { YourFilters } from \"./YourFilters\";\nimport { CreateFilter } from \"./CreateFilter\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <HashRouter>\n        <Route path=\"/action-settings\" exact>\n          <Header backButton=\"/\" />\n          <ActionSettings />\n        </Route>\n        <Route path=\"/create-filter\" exact>\n          <Header backButton=\"/\" />\n          <CreateFilter />\n        </Route>\n        <Route path=\"/filter/:filterId\" exact>\n          <Header backButton=\"/\" />\n          <TinderCards />\n          <SwipeButtons />\n        </Route>\n        <Route path=\"/\" exact>\n          <Header />\n          <YourFilters />\n        </Route>\n      </HashRouter>\n\n      {/* Header */}\n\n      {/* Tinder cards */}\n      {/* Buttons below tinder cards */}\n\n      {/* Chats Screen */}\n      {/* Individual chat screen */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}