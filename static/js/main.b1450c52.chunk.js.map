{"version":3,"sources":["Chat.js","Chats.js","ChatScreen.js","Header.js","SwipeButtons.js","firebase.js","clients/fetch.ts","clients/tp.ts","cards.provider/index.ts","TinderCards.js","utils/promiseEffect.ts","App.js","reportWebVitals.js","index.js"],"names":["chat","name","message","timestamp","profilePic","to","className","Avatar","src","Chats","ChatScreen","useState","input","setInput","image","messages","setMessages","map","alt","value","onChange","e","target","placeholder","type","onClick","preventDefault","Header","backButton","history","useHistory","IconButton","replace","fontSize","SwipeButtons","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","CustomFieldType","CustomFieldHistoryState","Client","baseUrl","http","jsonParseReviver","undefined","this","window","command","url_","options_","body","JSON","stringify","method","headers","Accept","fetch","then","_response","processExecuteCommand","response","status","_headers","forEach","v","k","text","_responseText","parse","result400","throwException","result401","result403","result500","Promise","resolve","id","resourceType","include","dateFormat","Error","encodeURIComponent","processGetEntity","processGetAssignable","processGetGeneralComments","processGetGeneralAttachments","processGetEntityState","where","select","take","skip","processGetEntitiesV2","payload","processGetEntitiesV2ByPost","processGetEntityV2","processGetEntityV2ByPost","processGetEntitiesHistoryV2","processGetEntitiesHistoryV2ByPost","processGetGeneral","processGetProjectsV2","processGetTeamsV2","filter","processGetAssignables","processGetAssignablesByPost","processGetAssignableById","processGetUserAuthenticationToken","processGetUser","user","processUpdateUser","processCreateUser","processGetLoggedUser","processGetMetaV2","processGetDomainSchemaV2","processGetCommentById","processGetAttachmentById","processGetRoleEntityTypeProcessSettings","processGetUsers","processGetAssignments","processGetDeletedUsers","processGetRoles","processGetRoleEfforts","entity","processUndelete","processGetCustomFields","processGetCustomFieldsV2","SwaggerException","result","isSwaggerException","obj","getClient","baseHttp","userAccessToken","fetchTp","initParam","a","init","request","url","isString","userToken","indexOf","requestUrl","TinderCards","people","asyncFunction","triggerWhenChanged","data","setData","error","setError","isLoading","setIsLoading","useEffect","isSubscribed","functionError","usePromiseEffect","client","getAssignables","res","console","log","person","preventSwipe","style","backgroundImage","queryClient","QueryClient","defaultOptions","queries","retry","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1450c52.chunk.js","sourcesContent":["import { Avatar } from '@material-ui/core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Chat.css';\n\nfunction chat({ name, message, timestamp, profilePic }) {\n    return (\n        <Link to = {`/chat/${name}`}>\n            <div className = \"chat\">\n                <Avatar className = \"chat__image\" src = {profilePic}  />\n                <div className = \"chat__details\">\n                    <h2>{name}</h2>\n                    <p>{message}</p>\n                </div>\n                <p className = \"chat__timestamp\">{timestamp}</p>\n            </div>\n        </Link>\n    )\n}\n\nexport default chat\n","import React from 'react';\nimport Chat from './Chat';\nimport './Chats.css';\n\nfunction Chats() {\n    return (\n        <div className = \"chats\">\n            <Chat\n                name = \"Rini\"\n                message = \"Whats up ;)\"\n                timestamp = \"45 minutes ago\"\n                profilePic = \"https://expertphotography.com/wp-content/uploads/2018/10/cool-profile-pictures-retouching-1.jpg\"\n            />\n\n            <Chat\n                name = \"Priya\"\n                message = \"Hi...\"\n                timestamp = \" 1 hr ago\"\n                profilePic = \"https://images.unsplash.com/photo-1532074205216-d0e1f4b87368?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8d29tYW4lMjBwcm9maWxlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80\"\n            />\n            \n\n            <Chat\n                name = \"Souma\"\n                message = \"How itz going\"\n                timestamp = \"1 hr ago\"\n                profilePic = \"https://d2qp0siotla746.cloudfront.net/img/use-cases/profile-picture/template_0.jpg\"\n            />\n\n            <Chat\n                name = \"Mikasha\"\n                message = \"what happend?\"\n                timestamp = \"1 hr ago\"\n                profilePic = \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRBwgu1A5zgPSvfE83nurkuzNEoXs9DMNr8Ww&usqp=CAU\"\n            />\n\n            <Chat\n                name = \"Kaneki\"\n                message = \"What's up dude\"\n                timestamp = \"3 days ago\"\n                profilePic = \"https://i.pinimg.com/736x/04/bb/21/04bb2164bbfa3684118a442c17d086bf.jpg\"\n            />\n\n            <Chat\n                name = \"Cat Man\"\n                message = \"chill bro ;)\"\n                timestamp = \"3 days ago\"\n                profilePic = \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRdZTtK6pHqjvMrFvkwyTP_WgXYLrSAdna_8w&usqp=CAU\"\n            />\n        </div>\n    )\n}\n\nexport default Chats\n","import React from 'react';\nimport './ChatScreen.css';\nimport { useState } from 'react';\nimport { Avatar } from '@material-ui/core';\n\nfunction ChatScreen() {\n    const [input, setInput] = useState('');\n    const [messages, setMessages] = useState([\n        {\n            name: \"Rini\",\n            image: \"https://expertphotography.com/wp-content/uploads/2018/10/cool-profile-pictures-retouching-1.jpg\",\n            message: \"What's up\",\n        },\n        {\n            name: \"Rini\",\n            image: \"https://expertphotography.com/wp-content/uploads/2018/10/cool-profile-pictures-retouching-1.jpg\",\n            message: \"How r u?\",\n        },\n        {\n            \n            message: \"How it's going\",\n        }\n    ]);\n\n    const handleSend = e => {\n        e.preventDefault();\n\n        setMessages([...messages, { message: input }]);\n        setInput(\"\");\n    }\n\n    return (\n        <div className = \"chatScreen\">\n            <p className = \"chatScreen__timestamp\">YOU MATCHED WITH RINI ON 10/09/20</p>\n            {messages.map((message) => (\n                message.name ? (\n                    <div className = \"chatScreen__message\">\n                        <Avatar\n                            className = \"chatScreen__image\"\n                            alt = {message.name}\n                            src = {message.image}\n                        />\n                        <p className = \"chatScreen__text\">{message.message}</p>\n                    </div>\n                ) : (\n                    <div className = \"chatScreen__message\">\n                        <p className = \"chatScreen__textUser\">{message.message}</p>\n                    </div>\n                )                \n            ))}\n             \n            <form className = \"chatScreen__input\">\n                <input\n                    value = {input}\n                    onChange = {(e) => setInput(e.target.value)}\n                    className = \"chatScreen__inputField\" \n                    placeholder = \"Type a message\" \n                    type = \"text\" />\n                <button onClick = {handleSend} type = \"submit\" className = \"chatScreen__inputButton\">SEND</button>\n            </form>\n            \n        </div>\n    )\n}\n\nexport default ChatScreen\n","import React from 'react';\nimport './Header.css';\nimport PersonIcon from '@material-ui/icons/Person';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link, useHistory } from 'react-router-dom';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nfunction Header({ backButton }) {\n    // is used to remember the browser history\n    const history = useHistory();\n\n    return (\n        <div className = \"header\">\n            {backButton ? (\n                <IconButton onClick = {() => history.replace(backButton)}>\n                    <ArrowBackIosIcon fontSize = \"large\" className = \"header__icon\" />\n                </IconButton>\n            ) : (\n                <div className = \"header__icon\" />\n            )}\n\n            <Link to = \"/\">\n                <img\n                    className = \"header__logo\"\n                    src = \"https://mma.prnewswire.com/media/82080/apptio_logo.jpg?w=200\"\n                    alt = \"tinder logo\"\n                />\n            </Link>\n\n            <Link to = \"/chat\">\n                <IconButton>\n                    <TuneIcon className = \"header__icon\" fontSize = \"large\" />\n                </IconButton>\n            </Link>\n\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './SwipeButtons.css';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport { IconButton } from '@material-ui/core';\n\nfunction SwipeButtons() {\n    return (\n        <div className = \"swipeButtons\">\n            <IconButton className = \"swipeButtons__repeat\">\n                <ReplayIcon fontSize = \"large\" />\n            </IconButton>\n\n            <IconButton className = \"swipeButtons__left\">\n                <CloseIcon fontSize = \"large\" />\n            </IconButton>\n\n            <IconButton className = \"swipeButtons__star\">\n                <StarRateIcon fontSize = \"large\" />\n            </IconButton>\n\n            <IconButton className = \"swipeButtons__right\">\n                <FavoriteIcon fontSize = \"large\" />\n            </IconButton>\n\n            <IconButton className = \"swipeButtons__lightning\">\n                <FlashOnIcon fontSize = \"large\" />\n            </IconButton>\n        </div>\n    )\n}\n\nexport default SwipeButtons\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCqVnKBE0yOd-khMsEL4rFzp4ky16YNOvQ\",\n  authDomain: \"tinder-cd7ff.firebaseapp.com\",\n  projectId: \"tinder-cd7ff\",\n  storageBucket: \"tinder-cd7ff.appspot.com\",\n  messagingSenderId: \"756744945636\",\n  appId: \"1:756744945636:web:c60c1a9399473d4b5f91f1\"\n};\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const database = firebaseApp.firestore();\n\n  export default database;","import { isString } from \"util\"\n\nfunction addHeader(init: RequestInit, key: string, value: string) {\n  if (!init.headers) {\n    init.headers = {\n      [key]: value\n    }\n  } else if ((<any>init.headers).append) {\n    const headers: any = init.headers\n    headers.append(key, value)\n  } else {\n    (init as any).headers[key] = value\n  }\n}\n\nfunction enrichUrlWithUserTokenIfNeeded(url: string, userToken?: string): string {\n  if (userToken) {\n    url += url.indexOf('?') < 0 ? '?' : '&'\n    url += 'access_token='\n    url += userToken\n  }\n  return url\n}\n\nconst getRequestUrl = (request: RequestInfo) => {\n  return isString(request) ? request : (request as Request).url\n}\n\n\nexport const tpHttpFetch = (\n  baseHttp: {\n    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>\n  },\n  userAccessToken?: string\n) => ({\n  fetch: async (input: RequestInfo, initParam?: RequestInit) => {\n    const init = initParam ?? {}\n    const requestUrl = enrichUrlWithUserTokenIfNeeded(getRequestUrl(input), userAccessToken)\n\n\n    const response = await baseHttp.fetch(requestUrl, init)\n    return response\n  }\n})\n","/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nimport { RequestInfo, RequestInit, Response } from 'node-fetch'\n\nexport interface IClient {\n  /**\n   * Execute batch commands\n   * @param command (optional)\n   * @return Successful response\n   */\n  executeCommand(command: Command | null | undefined): Promise<CommandResult>\n  /**\n   * Returns entity by entity id and kind\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntity(\n    id: number,\n    resourceType: string,\n    include: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<EntityResult>\n  /**\n   * Get assignable\n   * @param id Entity id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAssignable(id: number, include: string | null | undefined): Promise<Assignable>\n  /**\n   * Retrieves comments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralComments(id: number, include: string | null | undefined): Promise<Anonymous>\n  /**\n   * Retrieves attachments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralAttachments(id: number, include: string | null | undefined): Promise<Anonymous2>\n  /**\n   * Get entity state\n   * @param id Entity id\n   * @return Successful response\n   */\n  getEntityState(id: number): Promise<EntityState>\n  /**\n   * get entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous3>\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous4>\n  /**\n   * get entity from TP including extended domain entities\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param select (optional) Causes some fields to be included in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntityV2(\n    id: number,\n    resourceType: string,\n    select: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous5>\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param id (optional) entityId\n   * @return Successful response\n   */\n  getEntityV2ByPost(\n    resourceType: string,\n    id: number | null | undefined,\n    payload: PostQueryParameters\n  ): Promise<Anonymous6>\n  /**\n   * get historical entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous7>\n  /**\n   * get historical data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous8>\n  /**\n   * Get general\n   * @param id Entity id\n   * @return Successful response\n   */\n  getGeneral(id: number): Promise<Anonymous9>\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getProjectsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous10>\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getTeamsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous11>\n  /**\n   * Retrieves list of assingables\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param filter (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getAssignables(\n    where: string | null | undefined,\n    filter: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous12>\n  /**\n   * Retrieves list of assingables by post\n   * @return Successful response\n   */\n  getAssignablesByPost(payload: PostQueryParameters): Promise<Anonymous13>\n  /**\n   * Retrieves assignable by id\n   * @param id entityId\n   * @param select (optional) Causes some fields to be included in the response\n   * @return Successful response\n   */\n  getAssignableById(id: number, select: string | null | undefined): Promise<Anonymous14>\n  /**\n   * Get user authentication token\n   * @return Successful response\n   */\n  getUserAuthenticationToken(): Promise<V1Authentication>\n  /**\n   * Retrieves user\n   * @param id user id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getUser(id: number, include: string | null | undefined): Promise<V1User>\n  /**\n   * Update user\n   * @return Successful response\n   */\n  updateUser(user: V1User): Promise<V1User>\n  /**\n   * Add a user to TP\n   * @return Successful response\n   */\n  createUser(user: V1User): Promise<V1User>\n  /**\n   * Get current user details\n   * @return Successful response\n   */\n  getLoggedUser(): Promise<V1User>\n  /**\n   * Get account meta v2\n   * @return Successful response\n   */\n  getMetaV2(): Promise<Anonymous15>\n  /**\n   * Get account domain schema v2\n   * @return Successful response\n   */\n  getDomainSchemaV2(): Promise<Anonymous16>\n  /**\n   * Retrieves comment by id\n   * @param id commentId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getCommentById(id: number, include: string | null | undefined): Promise<V1Comment>\n  /**\n   * Retrieves attachment by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAttachmentById(id: number, include: string | null | undefined): Promise<V1Attachment>\n  /**\n   * Retrieves role entity settings\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEntityTypeProcessSettings(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous17>\n  /**\n   * Retrieves users\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getUsers(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous18>\n  /**\n   * Retrieves assignments\n   * @param select (optional) Causes some fields to be included in the response\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @return Successful response\n   */\n  getAssignments(select: string | null | undefined, where: string | null | undefined): Promise<Anonymous19>\n  /**\n   * Retrieves a list of deleted users\n   * @return Successful response\n   */\n  getDeletedUsers(): Promise<V1DeletedUser[]>\n  /**\n   * Get list of roles\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoles(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous20>\n  /**\n   * Get list of role efforts\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEfforts(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous21>\n  /**\n   * Undelete specified entity\n   * @return Successful response\n   */\n  undelete(entity: V1UndeleteEntityRef): Promise<void>\n  /**\n   * Retrieves list of custom fields\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFields(\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous22>\n  /**\n   * Retrieves list of custom fields\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFieldsV2(\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous23>\n}\n\nexport class Client implements IClient {\n  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }\n  private baseUrl: string\n  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined\n\n  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n    this.http = http ? http : <any>window\n    this.baseUrl = baseUrl ? baseUrl : ''\n  }\n\n  /**\n   * Execute batch commands\n   * @param command (optional)\n   * @return Successful response\n   */\n  executeCommand(command: Command | null | undefined): Promise<CommandResult> {\n    let url_ = this.baseUrl + '/api/commands/v1/execute'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(command)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processExecuteCommand(_response)\n    })\n  }\n\n  protected processExecuteCommand(response: Response): Promise<CommandResult> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <CommandResult>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<CommandResult>(<any>null)\n  }\n\n  /**\n   * Returns entity by entity id and kind\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntity(\n    id: number,\n    resourceType: string,\n    include: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<EntityResult> {\n    let url_ = this.baseUrl + '/api/v1/{resourceType}/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntity(_response)\n    })\n  }\n\n  protected processGetEntity(response: Response): Promise<EntityResult> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <EntityResult>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<EntityResult>(<any>null)\n  }\n\n  /**\n   * Get assignable\n   * @param id Entity id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAssignable(id: number, include: string | null | undefined): Promise<Assignable> {\n    let url_ = this.baseUrl + '/api/v1/assignables/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignable(_response)\n    })\n  }\n\n  protected processGetAssignable(response: Response): Promise<Assignable> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Assignable>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Assignable>(<any>null)\n  }\n\n  /**\n   * Retrieves comments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralComments(id: number, include: string | null | undefined): Promise<Anonymous> {\n    let url_ = this.baseUrl + '/api/v1/general/{id}/comments?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneralComments(_response)\n    })\n  }\n\n  protected processGetGeneralComments(response: Response): Promise<Anonymous> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous>(<any>null)\n  }\n\n  /**\n   * Retrieves attachments for general by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getGeneralAttachments(id: number, include: string | null | undefined): Promise<Anonymous2> {\n    let url_ = this.baseUrl + '/api/v1/general/{id}/attachments?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneralAttachments(_response)\n    })\n  }\n\n  protected processGetGeneralAttachments(response: Response): Promise<Anonymous2> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous2>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous2>(<any>null)\n  }\n\n  /**\n   * Get entity state\n   * @param id Entity id\n   * @return Successful response\n   */\n  getEntityState(id: number): Promise<EntityState> {\n    let url_ = this.baseUrl + '/api/v1/entitystates/{id}'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityState(_response)\n    })\n  }\n\n  protected processGetEntityState(response: Response): Promise<EntityState> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <EntityState>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<EntityState>(<any>null)\n  }\n\n  /**\n   * get entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous3> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesV2(_response)\n    })\n  }\n\n  protected processGetEntitiesV2(response: Response): Promise<Anonymous3> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous3>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous3>(<any>null)\n  }\n\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous4> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntitiesV2ByPost(response: Response): Promise<Anonymous4> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous4>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous4>(<any>null)\n  }\n\n  /**\n   * get entity from TP including extended domain entities\n   * @param id Entity id\n   * @param resourceType Resource type\n   * @param select (optional) Causes some fields to be included in the response\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntityV2(\n    id: number,\n    resourceType: string,\n    select: string | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous5> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityV2(_response)\n    })\n  }\n\n  protected processGetEntityV2(response: Response): Promise<Anonymous5> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous5>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous5>(<any>null)\n  }\n\n  /**\n   * get data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param id (optional) entityId\n   * @return Successful response\n   */\n  getEntityV2ByPost(\n    resourceType: string,\n    id: number | null | undefined,\n    payload: PostQueryParameters\n  ): Promise<Anonymous6> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}/{id}'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (id !== null && id !== undefined) url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    else url_ = url_.replace('/{id}', '')\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntityV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntityV2ByPost(response: Response): Promise<Anonymous6> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous6>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous6>(<any>null)\n  }\n\n  /**\n   * get historical entities from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2(\n    resourceType: string,\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous7> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}History?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesHistoryV2(_response)\n    })\n  }\n\n  protected processGetEntitiesHistoryV2(response: Response): Promise<Anonymous7> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous7>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous7>(<any>null)\n  }\n\n  /**\n   * get historical data from TP including extended domain entities\n   * @param resourceType Resource type\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getEntitiesHistoryV2ByPost(\n    resourceType: string,\n    payload: PostQueryParameters,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous8> {\n    let url_ = this.baseUrl + '/api/v2/{resourceType}History?'\n    if (resourceType === undefined || resourceType === null)\n      throw new Error(\"The parameter 'resourceType' must be defined.\")\n    url_ = url_.replace('{resourceType}', encodeURIComponent('' + resourceType))\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetEntitiesHistoryV2ByPost(_response)\n    })\n  }\n\n  protected processGetEntitiesHistoryV2ByPost(response: Response): Promise<Anonymous8> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous8>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous8>(<any>null)\n  }\n\n  /**\n   * Get general\n   * @param id Entity id\n   * @return Successful response\n   */\n  getGeneral(id: number): Promise<Anonymous9> {\n    let url_ = this.baseUrl + '/api/v2/generals/{id}'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetGeneral(_response)\n    })\n  }\n\n  protected processGetGeneral(response: Response): Promise<Anonymous9> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous9>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous9>(<any>null)\n  }\n\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getProjectsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous10> {\n    let url_ = this.baseUrl + '/api/v2/projects?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetProjectsV2(_response)\n    })\n  }\n\n  protected processGetProjectsV2(response: Response): Promise<Anonymous10> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous10>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous10>(<any>null)\n  }\n\n  /**\n   * Retrieves list of project\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getTeamsV2(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous11> {\n    let url_ = this.baseUrl + '/api/v2/teams?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetTeamsV2(_response)\n    })\n  }\n\n  protected processGetTeamsV2(response: Response): Promise<Anonymous11> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous11>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous11>(<any>null)\n  }\n\n  /**\n   * Retrieves list of assingables\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param filter (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getAssignables(\n    where: string | null | undefined,\n    filter: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous12> {\n    let url_ = this.baseUrl + '/api/v2/assignables?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (filter !== undefined) url_ += 'filter=' + encodeURIComponent('' + filter) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignables(_response)\n    })\n  }\n\n  protected processGetAssignables(response: Response): Promise<Anonymous12> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous12>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous12>(<any>null)\n  }\n\n  /**\n   * Retrieves list of assingables by post\n   * @return Successful response\n   */\n  getAssignablesByPost(payload: PostQueryParameters): Promise<Anonymous13> {\n    let url_ = this.baseUrl + '/api/v2/assignables'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(payload)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignablesByPost(_response)\n    })\n  }\n\n  protected processGetAssignablesByPost(response: Response): Promise<Anonymous13> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous13>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous13>(<any>null)\n  }\n\n  /**\n   * Retrieves assignable by id\n   * @param id entityId\n   * @param select (optional) Causes some fields to be included in the response\n   * @return Successful response\n   */\n  getAssignableById(id: number, select: string | null | undefined): Promise<Anonymous14> {\n    let url_ = this.baseUrl + '/api/v2/assignables/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignableById(_response)\n    })\n  }\n\n  protected processGetAssignableById(response: Response): Promise<Anonymous14> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous14>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous14>(<any>null)\n  }\n\n  /**\n   * Get user authentication token\n   * @return Successful response\n   */\n  getUserAuthenticationToken(): Promise<V1Authentication> {\n    let url_ = this.baseUrl + '/api/v1/authentication'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUserAuthenticationToken(_response)\n    })\n  }\n\n  protected processGetUserAuthenticationToken(response: Response): Promise<V1Authentication> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Authentication>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Authentication>(<any>null)\n  }\n\n  /**\n   * Retrieves user\n   * @param id user id\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getUser(id: number, include: string | null | undefined): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUser(_response)\n    })\n  }\n\n  protected processGetUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Update user\n   * @return Successful response\n   */\n  updateUser(user: V1User): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/{id}'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(user)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processUpdateUser(_response)\n    })\n  }\n\n  protected processUpdateUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Add a user to TP\n   * @return Successful response\n   */\n  createUser(user: V1User): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(user)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processCreateUser(_response)\n    })\n  }\n\n  protected processCreateUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 201) {\n      return response.text().then(_responseText => {\n        let result201: any = null\n        result201 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result201\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Get current user details\n   * @return Successful response\n   */\n  getLoggedUser(): Promise<V1User> {\n    let url_ = this.baseUrl + '/api/v1/users/loggedUser'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetLoggedUser(_response)\n    })\n  }\n\n  protected processGetLoggedUser(response: Response): Promise<V1User> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1User>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1User>(<any>null)\n  }\n\n  /**\n   * Get account meta v2\n   * @return Successful response\n   */\n  getMetaV2(): Promise<Anonymous15> {\n    let url_ = this.baseUrl + '/api/meta/v2'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetMetaV2(_response)\n    })\n  }\n\n  protected processGetMetaV2(response: Response): Promise<Anonymous15> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous15>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous15>(<any>null)\n  }\n\n  /**\n   * Get account domain schema v2\n   * @return Successful response\n   */\n  getDomainSchemaV2(): Promise<Anonymous16> {\n    let url_ = this.baseUrl + '/api/DomainSchema/v2'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetDomainSchemaV2(_response)\n    })\n  }\n\n  protected processGetDomainSchemaV2(response: Response): Promise<Anonymous16> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous16>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous16>(<any>null)\n  }\n\n  /**\n   * Retrieves comment by id\n   * @param id commentId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getCommentById(id: number, include: string | null | undefined): Promise<V1Comment> {\n    let url_ = this.baseUrl + '/api/v1/comments/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCommentById(_response)\n    })\n  }\n\n  protected processGetCommentById(response: Response): Promise<V1Comment> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Comment>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Comment>(<any>null)\n  }\n\n  /**\n   * Retrieves attachment by id\n   * @param id entityId\n   * @param include (optional) Causes related entities to be included inline in the response\n   * @return Successful response\n   */\n  getAttachmentById(id: number, include: string | null | undefined): Promise<V1Attachment> {\n    let url_ = this.baseUrl + '/api/v1/attachments/{id}?'\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\")\n    url_ = url_.replace('{id}', encodeURIComponent('' + id))\n    if (include !== undefined) url_ += 'include=' + encodeURIComponent('' + include) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAttachmentById(_response)\n    })\n  }\n\n  protected processGetAttachmentById(response: Response): Promise<V1Attachment> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1Attachment>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1Attachment>(<any>null)\n  }\n\n  /**\n   * Retrieves role entity settings\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEntityTypeProcessSettings(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous17> {\n    let url_ = this.baseUrl + '/api/v2/roleEntityTypeProcessSettings?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoleEntityTypeProcessSettings(_response)\n    })\n  }\n\n  protected processGetRoleEntityTypeProcessSettings(response: Response): Promise<Anonymous17> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous17>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous17>(<any>null)\n  }\n\n  /**\n   * Retrieves users\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getUsers(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous18> {\n    let url_ = this.baseUrl + '/api/v2/users?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetUsers(_response)\n    })\n  }\n\n  protected processGetUsers(response: Response): Promise<Anonymous18> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous18>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous18>(<any>null)\n  }\n\n  /**\n   * Retrieves assignments\n   * @param select (optional) Causes some fields to be included in the response\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @return Successful response\n   */\n  getAssignments(select: string | null | undefined, where: string | null | undefined): Promise<Anonymous19> {\n    let url_ = this.baseUrl + '/api/v2/assignments?'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetAssignments(_response)\n    })\n  }\n\n  protected processGetAssignments(response: Response): Promise<Anonymous19> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous19>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous19>(<any>null)\n  }\n\n  /**\n   * Retrieves a list of deleted users\n   * @return Successful response\n   */\n  getDeletedUsers(): Promise<V1DeletedUser[]> {\n    let url_ = this.baseUrl + '/api/deletedItems/v1/users'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetDeletedUsers(_response)\n    })\n  }\n\n  protected processGetDeletedUsers(response: Response): Promise<V1DeletedUser[]> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <V1DeletedUser[]>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<V1DeletedUser[]>(<any>null)\n  }\n\n  /**\n   * Get list of roles\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoles(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous20> {\n    let url_ = this.baseUrl + '/api/v2/roles?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoles(_response)\n    })\n  }\n\n  protected processGetRoles(response: Response): Promise<Anonymous20> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous20>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous20>(<any>null)\n  }\n\n  /**\n   * Get list of role efforts\n   * @param where (optional) Filters the results, based on a Boolean condition\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @return Successful response\n   */\n  getRoleEfforts(\n    where: string | null | undefined,\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined\n  ): Promise<Anonymous21> {\n    let url_ = this.baseUrl + '/api/v2/roleEfforts?'\n    if (where !== undefined) url_ += 'where=' + encodeURIComponent('' + where) + '&'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetRoleEfforts(_response)\n    })\n  }\n\n  protected processGetRoleEfforts(response: Response): Promise<Anonymous21> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous21>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous21>(<any>null)\n  }\n\n  /**\n   * Undelete specified entity\n   * @return Successful response\n   */\n  undelete(entity: V1UndeleteEntityRef): Promise<void> {\n    let url_ = this.baseUrl + '/api/v1/undelete'\n    url_ = url_.replace(/[?&]$/, '')\n\n    const content_ = JSON.stringify(entity)\n\n    let options_ = <RequestInit>{\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processUndelete(_response)\n    })\n  }\n\n  protected processUndelete(response: Response): Promise<void> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        return\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 404) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        let result500: any = null\n        result500 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result500)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<void>(<any>null)\n  }\n\n  /**\n   * Retrieves list of custom fields\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFields(\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous22> {\n    let url_ = this.baseUrl + '/api/v1/customfields?'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCustomFields(_response)\n    })\n  }\n\n  protected processGetCustomFields(response: Response): Promise<Anonymous22> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous22>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous22>(<any>null)\n  }\n\n  /**\n   * Retrieves list of custom fields\n   * @param select (optional) Causes some fields to be included in the response\n   * @param take (optional)\n   * @param skip (optional)\n   * @param dateFormat (optional)\n   * @return Successful response\n   */\n  getCustomFieldsV2(\n    select: string | null | undefined,\n    take: number | null | undefined,\n    skip: number | null | undefined,\n    dateFormat: string | null | undefined\n  ): Promise<Anonymous23> {\n    let url_ = this.baseUrl + '/api/v2/customFields?'\n    if (select !== undefined) url_ += 'select=' + encodeURIComponent('' + select) + '&'\n    if (take !== undefined) url_ += 'take=' + encodeURIComponent('' + take) + '&'\n    if (skip !== undefined) url_ += 'skip=' + encodeURIComponent('' + skip) + '&'\n    if (dateFormat !== undefined) url_ += 'dateFormat=' + encodeURIComponent('' + dateFormat) + '&'\n    url_ = url_.replace(/[?&]$/, '')\n\n    let options_ = <RequestInit>{\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    }\n\n    return this.http.fetch(url_, options_).then((_response: Response) => {\n      return this.processGetCustomFieldsV2(_response)\n    })\n  }\n\n  protected processGetCustomFieldsV2(response: Response): Promise<Anonymous23> {\n    const status = response.status\n    let _headers: any = {}\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v: any, k: any) => (_headers[k] = v))\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200: any = null\n        result200 = _responseText === '' ? null : <Anonymous23>JSON.parse(_responseText, this.jsonParseReviver)\n        return result200\n      })\n    } else if (status === 400) {\n      return response.text().then(_responseText => {\n        let result400: any = null\n        result400 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result400)\n      })\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401: any = null\n        result401 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result401)\n      })\n    } else if (status === 403) {\n      return response.text().then(_responseText => {\n        let result403: any = null\n        result403 = _responseText === '' ? null : <ErrorDto>JSON.parse(_responseText, this.jsonParseReviver)\n        return throwException('A server error occurred.', status, _responseText, _headers, result403)\n      })\n    } else if (status === 500) {\n      return response.text().then(_responseText => {\n        return throwException('A server error occurred.', status, _responseText, _headers)\n      })\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers)\n      })\n    }\n    return Promise.resolve<Anonymous23>(<any>null)\n  }\n}\n\nexport interface ErrorDto {\n  /** Internal error code */\n  code: string\n  /** Error message */\n  message: string\n}\n\nexport interface ApiV1EntityRef {\n  Id: number\n}\n\nexport interface CustomFieldV1 {\n  Id: number\n  Name: string\n  Value: string\n  FieldType: CustomFieldType\n}\n\nexport interface CustomFieldV2 {\n  resourceType?: string | undefined\n  id: number\n  name: string\n  fieldType: CustomFieldType\n  historyState?: CustomFieldHistoryState | undefined\n}\n\n/** Custom field types */\nexport enum CustomFieldType {\n  CheckBox = 'CheckBox',\n  MultipleSelectionList = 'MultipleSelectionList',\n  Number = 'Number',\n  Date = 'Date',\n  Text = 'Text',\n  DropDown = 'DropDown',\n  RichText = 'RichText',\n  Entity = 'Entity'\n}\n\n/** Custom field history state */\nexport enum CustomFieldHistoryState {\n  NoHistory = 'NoHistory',\n  WriteEnabled = 'WriteEnabled',\n  ReadEnabled = 'ReadEnabled'\n}\n\nexport interface EntityResult extends ApiV1EntityRef {\n  ResourceType: string\n  Name: string\n  EntityState?: ApiV1EntityRef | undefined\n  Project?: ApiV1EntityRef | undefined\n}\n\nexport interface Command {\n  /** Command name */\n  name: string\n  /** Command correlation id */\n  correlationId?: string | undefined\n}\n\nexport interface BatchCommand extends Command {\n  commands: Command[]\n  batchFlush?: boolean | undefined\n  isTransactional?: boolean | undefined\n}\n\nexport interface ResourceCommand extends Command {\n  resource: Resource\n}\n\nexport interface Resource {\n  id: number\n  resourceType?: string | undefined\n}\n\nexport interface CommandResult {\n  correlationId: string\n  silent: boolean\n  succeed: boolean\n  exception?: CommandResultException | undefined\n}\n\nexport interface ResourceCommandResult extends CommandResult {\n  resource?: Resource | undefined\n}\n\nexport interface BatchCommandResult extends CommandResult {\n  results?: CommandResult[] | undefined\n}\n\nexport interface CommandResultException {\n  message?: string | undefined\n}\n\nexport interface GeneralV2 {\n  /** general id */\n  id: number\n  /** general name */\n  name: string\n  /** general resource type */\n  resourceType: string\n}\n\nexport interface BaseEntityV2 {\n  /** general id */\n  id: number\n  /** general name */\n  name: string\n}\n\nexport interface RoleEffort {\n  /** role effort id */\n  id: number\n  /** role effort value */\n  effort: number\n}\n\nexport interface PostQueryParameters {\n  where?: string | undefined\n  filter?: string | undefined\n  select?: string | undefined\n  take?: string | undefined\n  skip?: string | undefined\n  orderBy?: string | undefined\n  result?: string | undefined\n}\n\nexport interface Assignable {\n  /** Assignable id */\n  Id?: number | undefined\n  /** Assignable Name */\n  Name: string\n  /** Assignable description */\n  Description?: string | undefined\n  /** Assignable tags */\n  Tags?: string | undefined\n  /** Assignable creation date */\n  CreateDate?: Date | undefined\n  EntityType?: EntityType | undefined\n  EntityState: EntityState\n  Project?: V1Project | undefined\n}\n\nexport interface EntityState extends ApiV1EntityRef {\n  /** EntityState name */\n  Name: string\n  /** Defines if the state is final */\n  IsFinal?: boolean | undefined\n  /** Defines if the state is initial */\n  IsInitial?: boolean | undefined\n  /** Defines if the state is planned */\n  IsPlanned?: boolean | undefined\n  Workflow?: Workflow | undefined\n}\n\nexport interface EntityType {\n  /** EntityType id */\n  Id?: number | undefined\n  /** EntityType name */\n  Name?: string | undefined\n  EntityStates?: EntityStates | undefined\n}\n\nexport interface EntityStates {\n  Items: EntityState[]\n}\n\nexport interface Workflow {\n  /** Workflow id */\n  Id: number\n  /** Workflow name */\n  Name?: string | undefined\n  EntityStates?: EntityStates | undefined\n}\n\nexport interface V1Authentication {\n  Token: string\n}\n\nexport interface V1User {\n  /** User id */\n  Id?: number | undefined\n  /** First Name */\n  FirstName?: string | undefined\n  /** Last Name */\n  LastName?: string | undefined\n  Password?: string | undefined\n  /** Email */\n  Email?: string | undefined\n  /** Login */\n  Login?: string | undefined\n  /** User creation date */\n  CreateDate?: Date | undefined\n  /** User last modified date */\n  ModifyDate?: Date | undefined\n  /** User delete date */\n  DeleteDate?: Date | undefined\n  /** Determines whether user is active in the system */\n  IsActive?: boolean | undefined\n  /** Determines whether user is administrator */\n  IsAdministrator?: boolean | undefined\n  /** Determines whether user is an integration user */\n  IsIntegration?: boolean | undefined\n  /** Tp Auth Unique Identifier */\n  GlobalId?: string | undefined\n  /** User avatar */\n  AvatarUri?: string | undefined\n  /** Last login date */\n  LastLoginDate?: string | undefined\n  WeeklyAvailableHours?: number | undefined\n  /** Determines whether user is Observer */\n  IsObserver?: boolean | undefined\n  /** Determines whether user is Contributor */\n  IsContributor?: boolean | undefined\n  ProjectMembers?: ProjectMembers | undefined\n}\n\nexport interface V1ProjectMember {\n  Id?: number | undefined\n  Project?: V1Project | undefined\n  User?: V1User | undefined\n}\n\nexport interface V1Project {\n  Id?: number | undefined\n  Name?: string | undefined\n}\n\nexport interface V1DeletedUser {\n  id?: number | undefined\n  email?: string | undefined\n}\n\nexport interface V1UndeleteEntityRef {\n  id: number\n  entityType: string\n}\n\nexport interface ProjectV2 extends GeneralV2 {\n  isActive?: boolean | undefined\n}\n\nexport interface TeamV2 extends GeneralV2 {\n  isActive?: boolean | undefined\n}\n\nexport interface AssignableV2 extends GeneralV2 {\n  description?: string | undefined\n  startDate?: any | undefined\n  endDate?: any | undefined\n  plannedStartDate?: any | undefined\n  plannedEndDate?: any | undefined\n  progress?: number | undefined\n  teams?: EntityRefV2[] | undefined\n  release?: EntityRefV2 | undefined\n  userStory?: EntityRefV2 | undefined\n  teamIteration?: EntityRefV2 | undefined\n  feature?: EntityRefV2 | undefined\n  epic?: EntityRefV2 | undefined\n  project?: EntityRefV2 | undefined\n  comments?: Comments | undefined\n  entityState?: EntityStateV2 | undefined\n}\n\nexport interface CommentV2 {\n  id?: number | undefined\n  createDate?: Date | undefined\n  description?: string | undefined\n  owner?: UserV2 | undefined\n}\n\nexport interface UserV2 {\n  id?: number | undefined\n  login?: string | undefined\n  firstName?: string | undefined\n  lastName?: string | undefined\n  email?: string | undefined\n}\n\nexport interface AssignmentV2 {\n  id?: number | undefined\n  role?: BaseEntityV2 | undefined\n  generalUser?: UserV2 | undefined\n}\n\nexport interface RoleV2 {\n  id?: number | undefined\n  name?: string | undefined\n}\n\nexport interface EntityStateV2 {\n  /** EntityState id */\n  id?: number | undefined\n  /** EntityState name */\n  name?: string | undefined\n  /** Defines if the state is final */\n  isFinal?: boolean | undefined\n  /** Defines if the state is initial */\n  isInitial?: boolean | undefined\n  /** Defines if the state is planned */\n  isPlanned?: boolean | undefined\n}\n\nexport interface EntityRefV2 {\n  /** Entity id */\n  id: number\n  name?: string | undefined\n}\n\nexport interface V1Comment {\n  /** Comment ID */\n  Id?: number | undefined\n  Description?: string | undefined\n  ParentId?: number | undefined\n  CreateDate?: string | undefined\n  DescriptionModifyDate?: string | undefined\n  IsPrivate?: boolean | undefined\n  IsPinned?: boolean | undefined\n  General?: GeneralV2 | undefined\n  Owner?: UserV2 | undefined\n}\n\nexport interface V1Attachment {\n  /** Entity ID */\n  Id?: number | undefined\n  Name?: string | undefined\n  UniqueFileName?: string | undefined\n  Description?: string | undefined\n  Date?: string | undefined\n  Uri?: string | undefined\n  ThumbnailUri?: string | undefined\n  MimeType?: string | undefined\n  Size?: number | undefined\n}\n\nexport interface MetaEntityV2 {\n  name: string\n  description: string\n  baseType?: string | undefined\n  fields: MetaFieldV2[]\n}\n\nexport interface MetaFieldV2 {\n  name: string\n  description: string\n  type: string\n  isNullablePrimitive?: boolean | undefined\n  isDeprecated?: boolean | undefined\n  itemType?: MetaItemTypeV2 | undefined\n  refType?: string | undefined\n  isReadOnly?: boolean | undefined\n  isCustom?: boolean | undefined\n  processIds?: number[] | undefined\n}\n\nexport interface MetaItemTypeV2 {\n  type: string\n  refType: string\n}\n\nexport interface DomainSchemaEntityType {\n  entityTypeId: number\n  name: string\n  isGlobal: boolean\n  isEnabled: boolean\n  isAssignable: boolean\n  isTeamAssignable: boolean\n  hasAuditHistory: boolean\n  color?: string | undefined\n  origin?: string | undefined\n}\n\nexport interface DomainSchemaPrimitiveAttribute {\n  attributeId: number\n  name: string\n  entityTypeId: number\n  valueType: string\n  isEnabled: boolean\n}\n\nexport interface DomainSchemaReferenceAttribute {\n  attributeId: number\n  name: string\n  entityTypeId: number\n  referenceEntityTypeId: number\n  referenceCollectionName: string\n  isEnabled: boolean\n}\n\nexport interface DomainSchemaManyToManyReference {\n  manyToManyReferenceId: number\n  referenceEntityTypeId: number\n  toLeftEntityAttributeId: number\n  toRightEntityAttributeId: number\n  leftEntityOppositeCollectionFieldName: string\n  rightEntityOppositeCollectionFieldName: string\n  isEnabled: boolean\n}\n\nexport interface Anonymous {\n  Items: V1Comment[]\n}\n\nexport interface Anonymous2 {\n  Items: V1Attachment[]\n}\n\nexport interface Anonymous3 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous4 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous5 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous6 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous7 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous8 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous9 {\n  items?: GeneralV2[] | undefined\n}\n\nexport interface Anonymous10 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: ProjectV2[] | undefined\n}\n\nexport interface Anonymous11 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: TeamV2[] | undefined\n}\n\nexport interface Anonymous12 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous13 {\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous14 {\n  items?: AssignableV2[] | undefined\n}\n\nexport interface Anonymous15 {\n  entities: MetaEntityV2[]\n}\n\nexport interface Anonymous16 {\n  entityTypes: DomainSchemaEntityType[]\n  primitiveAttributes: DomainSchemaPrimitiveAttribute[]\n  referenceAttributes: DomainSchemaReferenceAttribute[]\n  manyToManyReferences: DomainSchemaManyToManyReference[]\n}\n\nexport interface Anonymous17 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous18 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: UserV2[] | undefined\n}\n\nexport interface Anonymous19 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: AssignmentV2[] | undefined\n}\n\nexport interface Anonymous20 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: BaseEntityV2[] | undefined\n}\n\nexport interface Anonymous21 {\n  prev?: string | undefined\n  next?: string | undefined\n  items?: RoleEffort[] | undefined\n}\n\nexport interface Anonymous22 {\n  Items?: CustomFieldV1[] | undefined\n}\n\nexport interface Anonymous23 {\n  items?: CustomFieldV2[] | undefined\n}\n\nexport interface ProjectMembers {\n  Items?: V1ProjectMember[] | undefined\n}\n\nexport interface Comments {\n  items?: CommentV2[] | undefined\n}\n\nexport class SwaggerException extends Error {\n  message: string\n  status: number\n  response: string\n  headers: { [key: string]: any }\n  result: any\n\n  constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {\n    super()\n\n    this.message = message\n    this.status = status\n    this.response = response\n    this.headers = headers\n    this.result = result\n  }\n\n  protected isSwaggerException = true\n\n  static isSwaggerException(obj: any): obj is SwaggerException {\n    return obj.isSwaggerException === true\n  }\n}\n\nfunction throwException(\n  message: string,\n  status: number,\n  response: string,\n  headers: { [key: string]: any },\n  result?: any\n): any {\n  if (result !== null && result !== undefined) throw result\n  else throw new SwaggerException(message, status, response, headers, null)\n}\n","import { tpHttpFetch } from \"../clients/fetch\"\nimport { Client } from \"../clients/tp\"\nimport fetch from 'unfetch'\n\nexport interface CardInfo {\n\n}\n\nexport interface CardsProvider {\n  getCards: () => CardInfo\n}\n\n// use extension to fix CORS https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9\nexport const getClient = () => {\n  const fetchTp = tpHttpFetch({ fetch: fetch as any }, 'MTpzQkdRQXV0bmZ4c0k0SXN0WXp2QW9wR0ZkR1hUb1VNbS9TUGw3VldRWkF3PQ==')\n  return new Client('https://inteam.tpondemand.net', fetchTp as any)\n}\n","import React from 'react';\nimport { useState } from 'react';\nimport './TinderCard.css';\nimport TinderCard from 'react-tinder-card';\nimport { useEffect } from 'react';\nimport database from './firebase';\nimport { usePromiseEffect } from './utils/promiseEffect';\nimport { getClient } from './cards.provider';\n\nfunction TinderCards() {\n    const [people, setPeople] = useState([\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n        {\n            name: 'Alex Y',\n            url: 'https://ca.slack-edge.com/ETDMA4DGC-U01N72AP18W-56912122d62f-512'\n        },\n    ]);\n\n    // piece of code which run based on condition\n    const [a, b, error] = usePromiseEffect(async () => {\n        const client = getClient()\n        const res = await client.getAssignables()\n        console.log(res)\n    }, []);\n\n    console.log(error)\n\n    return (\n        <div>\n            <div className = \"tinderCards__cardContainer\">\n                {people.map((person) => (\n                    <TinderCard\n                        className = \"swipe\"\n                        key = {person.name}\n                        preventSwipe = {[ 'up', 'down' ]}\n                    >\n                        <div\n                            style = {{ backgroundImage: `url(${person.url})` }}\n                            className = \"card\"\n                        >\n                            <h3>{person.name}</h3>\n                        </div>\n                    </TinderCard>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default TinderCards\n","import { useState, useEffect } from 'react'\n\nexport function usePromiseEffect<TResult>(asyncFunction: () => Promise<TResult>, triggerWhenChanged: any[] = []) {\n  const [data, setData] = useState(null as TResult | null)\n  const [error, setError] = useState(null as Error | null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    let isSubscribed = true\n    asyncFunction().then(\n      result => {\n        if (isSubscribed) {\n          setData(result)\n          setError(null)\n          setIsLoading(false)\n        }\n      },\n      functionError => {\n        if (isSubscribed) {\n          setError(functionError)\n          setData(null)\n          setIsLoading(false)\n        }\n      }\n    )\n    return () => {\n      isSubscribed = false\n    }\n  }, triggerWhenChanged)\n\n  return [isLoading, data, error] as [boolean, TResult | null, Error | null]\n}\n","import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Chats from './Chats';\nimport ChatScreen from './ChatScreen';\nimport Header from './Header';\nimport SwipeButtons from './SwipeButtons';\nimport TinderCards from './TinderCards';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\n\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            retry: false,\n        }\n    }\n})\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Router>\n                <Switch>\n                    <QueryClientProvider client={queryClient}>\n                        <Route path=\"/chat/:person\">\n                            <Header backButton=\"/chat\"/>\n                            <ChatScreen/>\n                        </Route>\n                        <Route path=\"/chat\">\n                            <Header backButton=\"/\"/>\n                            <Chats/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Header/>\n                            <TinderCards/>\n                            <SwipeButtons/>\n                        </Route>\n                    </QueryClientProvider>\n                </Switch>\n            </Router>\n\n            {/* Header */}\n\n            {/* Tinder cards */}\n            {/* Buttons below tinder cards */}\n\n            {/* Chats Screen */}\n            {/* Individual chat screen */}\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}